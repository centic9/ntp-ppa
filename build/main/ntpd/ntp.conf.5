'\" t
.\"     Title: ntp.conf
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 2.0.12
.\"      Date: 2022-12-29
.\"    Manual: NTPsec
.\"    Source: NTPsec
.\"  Language: English
.\"
.TH "NTP.CONF" "5" "2022-12-29" "NTPsec" "NTPsec"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
ntp.conf \- Network Time Protocol (NTP) daemon configuration file format
.SH "SYNOPSIS"
.sp
/etc/ntp.conf
.SH "DESCRIPTION"
.sp
The \f(CRntp.conf\fP configuration file is read at initial startup by the
ntpd(8) daemon in order to specify the synchronization
sources, modes, and other related information. Usually, it is installed
in the \f(CR/etc\fP directory, but could be installed elsewhere (see the
daemon\(cqs \f(CR\-c\fP command line option).
.sp
The file format is similar to other UNIX configuration files. Comments
begin with a ‘#’ character and extend to the end of the line; blank
lines are ignored. Configuration commands consist of an initial keyword
followed by a list of arguments, some of which may be optional,
separated by whitespace. Commands may not be continued over multiple
lines. Arguments may be host names, host addresses written in numeric,
dotted\-quad form, integers, floating point numbers (when specifying
times in seconds) and text strings.
.sp
Configuration files may have inclusion lines.  The syntax is \f(CRincludefile\fP
followed by whitespace followed by a file or directory name.  The
configuration is evaluated as though the text of the file \- or all
files of the directory with the extension ".conf" \- were textually
spliced in at the point of the include. Relative paths will work, even
when the \-c option changes the config directory root.
.sp
The rest of this page describes the configuration and control options.
The "Notes on Configuring NTP and Setting up an NTP Subnet" page
(available as part of the HTML documentation provided under
\f(CR/usr/share/doc/ntp\fP) contains an extended discussion of these options.
In addition to the discussion of general \fIConfiguration Options\fP,
there are sections describing the following supported functionality and
the options used to control it:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
Authentication Support
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
NTS Support
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
Monitoring Support
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
Access Control Support
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
Automatic NTP Configuration Options
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
Reference Clock Support
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
Miscellaneous Options
.RE
.sp
Following these is a section describing \fIMiscellaneous Options\fP.
While there is a rich set of options available, the only required
option is one or more \f(CRpool\fP, \f(CRserver\fP, \f(CRpeer\fP, or \f(CRbroadcast\fP
commands.
.SH "CONFIGURATION SUPPORT"
.sp
Following is a description of the configuration commands in
NTPv4. There are two classes of commands, association commands that
configure a persistent association with a remote server or peer or
reference clock, and auxiliary commands that specify environment
variables that control various related operations.
.SS "Association Commands"
.sp
Only those options applicable to each command are listed below. Use of
options not listed may not be caught as an error, but may result in
some weird and even destructive behavior.
.sp
In contexts where a host name is expected, a \f(CR\-4\fP or \f(CR\-\-ipv4\fP
qualifier preceding the host name forces DNS resolution to the IPv4
namespace, while a \f(CR\-6\fP or \f(CR\-\-ipv6\fP qualifier forces DNS resolution to
the IPv6 namespace.
.sp
In these commands, an \fIaddress\fP can be any of (a) an IPV4 address in
a.b.c.d format, (b) an IPV6 address in [a:b:c:d:e:f:g:h] format, (c) a
link\-local IPV6 address with an interface specified in
[a:b:c:d:e:f:g:h]%device format, or (d) a DNS hostname.
.sp
\f(CRpool\fP \fIaddress\fP [\f(CRburst\fP] [\f(CRiburst\fP] [\f(CRversion\fP \fIversion\fP] [\f(CRprefer\fP] [\f(CRminpoll\fP \fIminpoll\fP] [\f(CRmaxpoll\fP \fImaxpoll\fP] [\f(CRpreempt\fP]
.sp
\f(CRserver\fP \fIaddress\fP [\f(CRkey\fP \fIkey\fP] [\f(CRburst\fP] [\f(CRiburst\fP] [\f(CRversion\fP \fIversion\fP] [\f(CRprefer\fP] [\f(CRminpoll\fP \fIminpoll\fP] [\f(CRmaxpoll\fP \fImaxpoll\fP]
.sp
\f(CRpeer\fP \fIaddress\fP [\f(CRkey\fP \fIkey\fP] [\f(CRversion\fP \fIversion\fP] [\f(CRprefer\fP] [\f(CRminpoll\fP \fIminpoll\fP] [\f(CRmaxpoll\fP \fImaxpoll\fP]
.sp
\f(CRunpeer\fP [\fIaddress\fP | \fIassocid\fP | \f(CRclock\fP \fIclocktype\fP [\f(CRunit\fP \fIunitnum\fP]]
.RS 4
These four commands specify the time server name or address to be
used and the mode in which to operate. The \fIaddress\fP can be either a
DNS name or an IP address in dotted\-quad notation.  If it is a
refclock, it can be \f(CRclock\fP followed by a type\-unit pair as in the
\f(CRrefclock\fP directive; a missing unit clause is interpreted as unit
0.
.RE
.sp
\f(CRpool\fP
.RS 4
For server addresses, this command mobilizes a persistent client
mode association with a number of remote servers. In this mode the
local clock can synchronized to the remote server, but the remote
server can never be synchronized to the local clock.
.RE
.sp
\f(CRserver\fP
.RS 4
For server addresses, this command mobilizes a persistent client
mode association with the specified remote server or local radio
clock. In this mode the local clock can synchronized to the remote
server, but the remote server can never be synchronized to the local
clock.
.RE
.sp
\f(CRpeer\fP
.RS 4
NTP peer mode has been removed for security reasons.  peer is now just
an alias for the server keyword.  See above.
.RE
.sp
\f(CRunpeer\fP
.RS 4
This command removes a previously configured association. An address
or association ID can be used to identify the association. Either an
IP address or DNS name can be used. This command is most useful when
supplied via \f(CRntpq\fP runtime configuration commands \f(CRconfig\fP and
\f(CRconfig\-from\-file\fP.
.RE
.SS "Association Options"
.sp
\f(CRbias\fP
.RS 4
Add the command argument, a floating\-point value in seconds, to the
time offset (&theta;) computed for this server; this may be useful if
you are a client on a network connection such as an ADSL line where
there is a predictable asymmetry between upstream and downstream
flight times.  One way you might see this is if you use a fixed set
of others and one has a stable offset that is an outlier from the
others; in that case, you might want to use \f(CRbias\fP to compensate out
the offset.
.RE
.sp
\f(CRburst\fP
.RS 4
When the server is reachable, send a burst of eight packets instead of
the usual one. The packet spacing is normally 2 s; however, the
spacing between the first and second packets can be changed with the
calldelay command to allow additional time for a modem or ISDN call to
complete; this is designed to improve timekeeping quality with the
\f(CRserver\fP command.
.RE
.sp
\f(CRiburst\fP
.RS 4
When the server is unreachable, send a burst of six packets instead
of the usual one. The packet spacing is normally 2 s; however, the
spacing between the first and second packets can be changed with the
calldelay command to allow additional time for a modem or ISDN call to
complete; this is designed to speed the initial synchronization
acquisition with the \f(CRserver\fP command, and when
ntpd(8) is started with the \f(CR\-q\fP option.
.RE
.sp
\f(CRkey\fP \fIkey\fP
.RS 4
All packets sent to and received from the server or peer are to
include authentication fields encrypted using the specified \fIkey\fP
identifier with values from 1 to 65535, inclusive. The default is to
include no encryption field.
.RE
.sp
\f(CRminpoll\fP \fIminpoll\fP, \f(CRmaxpoll\fP \fImaxpoll\fP
.RS 4
These options specify the minimum and maximum poll intervals for NTP
messages, as a power of 2 in seconds. The maximum poll interval
defaults to 10 (1,024 s), but can be increased by the \fImaxpoll\fP option
to an upper limit of 17 (36.4 h). The minimum poll interval defaults
to 6 (64 s), but can be decreased by the \fIminpoll\fP option to a lower
limit of 0 (1 s).
.RE
.sp
\f(CRmode\fP \fIoption\fP
.RS 4
Pass the \f(CRoption\fP to a reference clock driver. This option is valid
only with refclock addresses.
.RE
.sp
\f(CRnoselect\fP
.RS 4
Marks the server as unused, except for display purposes. The server is
discarded by the selection algorithm.
.RE
.sp
\f(CRprefer\fP
.RS 4
Marks the server as preferred. All other things being equal, this host
will be chosen for synchronization among a set of correctly operating
hosts. See the "Mitigation Rules and the prefer Keyword" page
for further information.
.RE
.sp
\f(CRtrue\fP
.RS 4
Mark the association to assume truechimer status; that is, always
survive the selection and clustering algorithms. This option can be
used with any association but is most useful for reference clocks
with large jitter on the serial port and precision pulse\-per\-second
(PPS) signals. Caution: this option defeats the algorithms designed to
cast out falsetickers and can allow these sources to set the system
clock. This option is valid only with the \f(CRserver\fP command.
.RE
.sp
\f(CRversion\fP \fIversion\fP
.RS 4
Specifies the version number to be used for outgoing NTP packets.
Versions 1\-4 are the choices, with version 4 the default.
.RE
.SS "Association Auxiliary Commands"
.sp
\f(CRmdnstries\fP \fInumber\fP
.RS 4
If we are participating in mDNS, after we have synched for the first
time we attempt to register with the mDNS system. If that registration
attempt fails, we try again at one minute intervals for up to
\fInumber\fP times. After all, \f(CRntpd\fP may be starting before mDNS. The
default value for \f(CRmdnstries\fP is 5.
.RE
.SS "Authentication Commands"
.sp
The following declarations control MAC authentication:
.sp
\f(CRcontrolkey\fP \fIkey\fP
.RS 4
Specifies the key identifier to use with the
ntpq(1) utility, which uses the standard protocol defined in
RFC 5905. The \fIkey\fP argument is the key identifier for a trusted key,
where the value can be in the range 1 to 65,535, inclusive.
.RE
.sp
\f(CRkeys\fP \fIkeyfile\fP
.RS 4
Specifies the complete path and location of the key file
containing the keys and key identifiers used by ntpd(8),
and ntpq(1) when operating with symmetric\-key cryptography.
This is the same operation as the \f(CR\-k\fP command line option.
.RE
.sp
\f(CRtrustedkey\fP \fIkey...\fP
.RS 4
Specifies the key identifiers which are trusted for the purposes of
authenticating peers with symmetric key cryptography, as well as keys
used by the ntpq(1) program.
Multiple keys on the same line should be separated by spaces.
Key ranges can be specified as (first ... last).  The spaces around
the ... are necessary.  Multiple \f(CRtrustedkey\fP lines are supported
and trusted keys can also be specified on the command line.
.RE
.sp
The MAC authentication procedures require that both the local and remote
servers share the same key and key identifier for this purpose,
although different keys can be used with different servers.
The \fIkey\fP arguments are 32\-bit unsigned integers with values from 1 to
65,535.
.SS "NTS Commands"
.sp
The following command controls NTS authentication. It overrides
normal TLS protocol negotiation, which is not usually necessary.
.sp
\f(CRnts\fP [enable|disable] [\f(CRmintls\fP \fIversion\fP] [\f(CRmaxtls\fP \fIversion\fP] [\f(CRtlsciphersuites\fP \fIname\fP]
.sp
The options are as follows:
.sp
\f(CRcert\fP \fIfile\fP
.RS 4
Present the certificate (chain) in \fIfile\fP as our certificate.
+
Note that there is no checking on the certificate.
In particular, it may have expired or may not cover the host name
used to get to this server or may not be signed by a CA that
is in the clients root\-server collection.
.RE
.sp
\f(CRkey\fP \fIfile\fP
.RS 4
Read the private key to our certificate from \fIfile\fP.
.RE
.sp
\f(CRca\fP \fIlocation\fP
.RS 4
Use the file, or directory, specified by \fIlocation\fP to
validate NTS\-KE server certificates instead of the system
default root certificates.  If a directory is specified, it
must have files named with their hash, as created by
\f(CRopenssl rehash\fP.
.RE
.sp
\f(CRcookie\fP \fIlocation\fP
.RS 4
Use the file (or directory) specified by \fIlocation\fP to
store the keys used to make and decode cookies.  The default
is \fI/var/lib/ntp/nts\-keys\fP.
.RE
.sp
\f(CRenable\fP
.RS 4
Enable NTS\-KE server.
When enabled, \f(CRcert\fP and \f(CRkey\fP are required.
.RE
.sp
\f(CRdisable\fP
.RS 4
Disable NTS\-KE server.
.RE
.sp
\f(CRmintls\fP \fIstring\fP
.RS 4
Set the lowest allowable TLS version to negotiate. Will be useful in
the wake of a TLS compromise.  Reasonable values are
\fITLS1.3\fP if your system supports it.  TLS 1.3 was first supported in
OpenSSL version 1.1.1.
.RE
.sp
\f(CRmaxtls\fP \fIstring\fP
.RS 4
Set the highest allowable TLS version to negotiate. By setting
\f(CRmintls\fP and \f(CRmaxtls\fP equal, you can force the TLS version for
testing. Format is as for \f(CRmintls\fP.
.RE
.sp
\f(CRtlsciphersuites\fP \fIstring\fP
.RS 4
An OpenSSL ciphersuite list to configure the allowed ciphersuites for
TLS 1.3.  A single NULL cipher disables encryption and use of certificates.
.RE
.sp
\f(CRaead\fP \fIstring\fP
.RS 4
Specify the crypto algorithm to be used on the wire.  The choices
come from RFC 5297.  The only options supported are AES_SIV_CMAC_256,
AES_SIV_CMAC_384, and AES_SIV_CMAC_512.  This slot is dual use.
It is the server default if the remote client doesn\(cqt request a
valid choice and it is also the preference passed to the
remote client if the server command doesn\(cqt specify a preference.
The default is AES_SIV_CMAC_256.
.RE
.sp
The following options of the \f(CRserver\fP command configure NTS (as a client).
.sp
\f(CRnts\fP
.RS 4
Use Network Time Security (NTS) for authentication.  Normally,
this is all you have to do to activate the client side of NTS.
+
The hostname following the \f(CRserver\fP command is used as the address
of the NTS key exchange server (NTS\-KE) rather than the address
of a NTP server.  The NTS\-KE exchange defaults to using the same
IP address for the NTP server.
+
Note that the \f(CRserver\fP hostname must match the name on the NTS\-KE
server\(cqs certificate.
.RE
.sp
\f(CRnoval\fP
.RS 4
Do not validate the server certificate.
.RE
.sp
\f(CRca\fP \fIlocation\fP
.RS 4
Use the file, or directory, specified by \fIlocation\fP to validate the
NTS\-KE server certificate, overriding the site default.  Do not use
any other CA.  If a directory is specified, it must have files named
with their hash, as created by \f(CRopenssl rehash\fP.
.RE
.sp
\f(CRaead\fP \fIstring\fP
.RS 4
Specify the preferred crypto algorithm to be used on the wire.
The only options supported are AES_SIV_CMAC_256, AES_SIV_CMAC_384, and
AES_SIV_CMAC_512.  The server may ignore the request.  See the \f(CRaead\fP
option above.
+
The same \f(CRaead\fP algorithms are also used to encrypt cookies.
The default is AES_SIV_CMAC_256.  There is no config file option to
change it, but you can change it by editing the saved cookie key
file, probably \fI/var/lib/ntp/nts\-keys\fP.  Adjust the \fIL:\fP slot to be
48 or 64 and adjust the \fII:\fP slots to have the right number of bytes.
Then restart the server.  (All old cookies held by clients will be
rejected so their next 8 NTP requests will be ignored.  They should
recover by retrying NTS\-KE to get fresh cookies.)
.RE
.SH "MONITORING SUPPORT"
.sp
ntpd(8) includes a comprehensive monitoring facility suitable
for continuous, long term recording of server and client timekeeping
performance. See the \f(CRstatistics\fP command below for a listing and example of
each type of statistics currently supported. Statistic files are managed
using file generation sets and scripts in the ./scripts directory of this
distribution. Using these facilities and UNIX cron(8) jobs, the data
can be automatically summarized and archived for retrospective
analysis.
.SS "Monitoring Commands"
.sp
\f(CRstatistics\fP \fIname...\fP
.RS 4
Enables writing of statistics records. Currently, eight kinds of
\fIname\fP statistics are supported.
.sp
\f(CRclockstats\fP
.RS 4
Enables recording of clock driver statistics information. Each
update received from a clock driver appends a line of the following
form to the file generation set named \fIclockstats\fP:
.RE
.sp
.if n .RS 4
.nf
.fam C
49213 525.624 SPECTRACOM(1) 93 226 00:08:29.606
.fam
.fi
.if n .RE
.TS
allbox tab(:);
lt lt lt.
T{
.sp
Item
T}:T{
.sp
Units
T}:T{
.sp
Description
T}
T{
.sp
49213
T}:T{
.sp
MJD
T}:T{
.sp
modified Julian day number
T}
T{
.sp
525.624
T}:T{
.sp
s
T}:T{
.sp
time of day (s) past midnight UTC
T}
T{
.sp
SPECTRACOM(1)
T}:T{
.sp

T}:T{
.sp
receiver identifier (Spectracom unit 1)
T}
T{
.sp
93 226 00:08:29.606
T}:T{
.sp

T}:T{
.sp
timecode (format varies by refclock)
T}
.TE
.sp
.sp
The first two fields show the date (Modified Julian Day) and time
(seconds and fraction past UTC midnight). The next
normally shows clock type and unit (but if you are running in strict
Classic compatibility mode it will show the magic clock address in
dotted\-quad notation). The final field is the last timecode received from the
clock in decoded ASCII format, where meaningful. For some clock drivers,
a good deal of additional information can be gathered and displayed as
well. See information specific to each clock for further details.
.sp
\f(CRloopstats\fP
.RS 4
Enables recording of loop filter statistics information. Each update
of the local clock outputs a line of the following form to the file
generation set named \fIloopstats\fP:
.RE
.sp
.if n .RS 4
.nf
.fam C
50935 75440.031 0.000006019 13.778190 0.000351733 0.0133806
.fam
.fi
.if n .RE
.TS
allbox tab(:);
lt lt lt.
T{
.sp
Item
T}:T{
.sp
Units
T}:T{
.sp
Description
T}
T{
.sp
\f(CR50935\fP
T}:T{
.sp
MJD
T}:T{
.sp
date
T}
T{
.sp
\f(CR75440.031\fP
T}:T{
.sp
s
T}:T{
.sp
time past midnight
T}
T{
.sp
\f(CR0.000006019\fP
T}:T{
.sp
s
T}:T{
.sp
clock offset
T}
T{
.sp
\f(CR13.778\fP
T}:T{
.sp
PPM
T}:T{
.sp
drift (frequency offset)
T}
T{
.sp
\f(CR0.000351733\fP
T}:T{
.sp
s
T}:T{
.sp
RMS jitter
T}
T{
.sp
\f(CR0.013380\fP
T}:T{
.sp
PPM
T}:T{
.sp
RMS frequency jitter (aka wander)
T}
T{
.sp
\f(CR6\fP
T}:T{
.sp
log2 s
T}:T{
.sp
clock discipline loop time constant
T}
.TE
.sp
.sp
The first two fields show the date (Modified Julian Day) and time
(seconds and fraction past UTC midnight). The next five fields show
time offset (seconds), frequency offset (parts per million \- PPM),
RMS jitter (seconds), Allan deviation (PPM) and clock discipline
time constant.
.sp
\f(CRprotostats\fP
.RS 4
Record significant peer and system events. Each significant
event appends one line to the \f(CRprotostats\fP file set:
.RE
.sp
\f(CR49213 525.624 128.4.1.1 963a 8a\fP \fImessage\fP
.TS
allbox tab(:);
lt lt lt.
T{
.sp
Item
T}:T{
.sp
Units
T}:T{
.sp
Description
T}
T{
.sp
\f(CR49213\fP
T}:T{
.sp
MJD
T}:T{
.sp
date
T}
T{
.sp
\f(CR525.624\fP
T}:T{
.sp
s
T}:T{
.sp
time past midnight
T}
T{
.sp
\f(CR128.4.1.1\fP
T}:T{
.sp
IP
T}:T{
.sp
source address (\f(CR0.0.0.0\fP for system)
T}
T{
.sp
\f(CR963a\fP
T}:T{
.sp
code
T}:T{
.sp
status word
T}
T{
.sp
\f(CR8a\fP
T}:T{
.sp
code
T}:T{
.sp
event message code
T}
T{
.sp
\fImessage\fP
T}:T{
.sp
text
T}:T{
.sp
event message
T}
.TE
.sp
.sp
The event message code and \fImessage\fP field are described on the
"Event Messages and Status Words" page.
.sp
\f(CRpeerstats\fP
.RS 4
Enables recording of peer statistics information. This includes
statistics records of all peers of an NTP server and of special
signals, where present and configured. Each valid update appends a
line of the following form to the current element of a file
generation set named \fIpeerstats\fP:
.RE
.sp
.if n .RS 4
.nf
.fam C
48773 10847.650 SPECTRACOM(4) 9714 \-0.001605376 0.000000000
    0.001424877 0.000958674
.fam
.fi
.if n .RE
.TS
allbox tab(:);
lt lt lt.
T{
.sp
Item
T}:T{
.sp
Units
T}:T{
.sp
Description
T}
T{
.sp
\f(CR48773\fP
T}:T{
.sp
MJD
T}:T{
.sp
date
T}
T{
.sp
\f(CR10847.650\fP
T}:T{
.sp
s
T}:T{
.sp
time past midnight
T}
T{
.sp
\f(CRSPECTRACOM(4)\fP
T}:T{
.sp

T}:T{
.sp
clock name (unit) or source address
T}
T{
.sp
\f(CR9714\fP
T}:T{
.sp
hex
T}:T{
.sp
status word
T}
T{
.sp
\f(CR\-0.001605376\fP
T}:T{
.sp
s
T}:T{
.sp
clock offset
T}
T{
.sp
\f(CR0.000000000\fP
T}:T{
.sp
s
T}:T{
.sp
roundtrip delay
T}
T{
.sp
\f(CR0.001424877\fP
T}:T{
.sp
s
T}:T{
.sp
dispersion
T}
T{
.sp
\f(CR0.000958674\fP
T}:T{
.sp
s
T}:T{
.sp
RMS jitter
T}
.TE
.sp
.sp
The first two fields show the date (Modified Julian Day) and time
(seconds and fraction past UTC midnight). The third field shows
the reference clock type and unit number (but if you are running in
the peer address in dotted\-quad notation instead) The fourth field
is a status word, encoded in hex in the format described in
Appendix A of the NTP specification RFC 1305. The final four fields
show the offset, delay, dispersion and RMS jitter, all in seconds.
.sp
\f(CRrawstats\fP
.RS 4
Enables recording of raw\-timestamp statistics information. This
includes statistics records of all peers of an NTP server and of
special signals, where present and configured. Each NTP message
received from a peer or clock driver appends a line of the following
form to the file generation set named \fIrawstats\fP:
.RE
.sp
.if n .RS 4
.nf
.fam C
59786 36302.768 2610:20:6f15:15::27 2604:a880:1:20::17:5001 3867818701.119346355 3867818701.152009264 3867818701.152010426 3867818702.768490825 0 3 4 1 13 \-29 0.000244 0.000488 .NIST. 0 1 2000
.fam
.fi
.if n .RE
.TS
allbox tab(:);
lt lt lt.
T{
.sp
Item
T}:T{
.sp
Units
T}:T{
.sp
Description
T}
T{
.sp
59786
T}:T{
.sp
MJD
T}:T{
.sp
date
T}
T{
.sp
36302.768
T}:T{
.sp
s
T}:T{
.sp
time past midnight
T}
T{
.sp
2610:20:6f15:15::27
T}:T{
.sp
IP
T}:T{
.sp
source address
T}
T{
.sp
2604:a880:1:20::17:5001
T}:T{
.sp
IP
T}:T{
.sp
destination address
T}
T{
.sp
3867818701.119346355
T}:T{
.sp
NTP s
T}:T{
.sp
origin timestamp
T}
T{
.sp
3867818701.152009264
T}:T{
.sp
NTP s
T}:T{
.sp
receive timestamp
T}
T{
.sp
3867818701.152010426
T}:T{
.sp
NTP s
T}:T{
.sp
transmit timestamp
T}
T{
.sp
3867818702.768490825
T}:T{
.sp
NTP s
T}:T{
.sp
destination timestamp
T}
T{
.sp
0
T}:T{
.sp
0: OK, 1: insert pending, 2: delete pending, 3: not synced
T}:T{
.sp
leap warning indicator
T}
T{
.sp
3
T}:T{
.sp
4 was current in 2012
T}:T{
.sp
NTP version
T}
T{
.sp
4
T}:T{
.sp
3: client, 4: server, 6: ntpq
T}:T{
.sp
mode
T}
T{
.sp
1
T}:T{
.sp
1\-15, 16: not synced
T}:T{
.sp
stratum
T}
T{
.sp
13
T}:T{
.sp
log2 seconds
T}:T{
.sp
poll
T}
T{
.sp
\-29
T}:T{
.sp
log2 seconds
T}:T{
.sp
precision
T}
T{
.sp
0.000244
T}:T{
.sp
seconds
T}:T{
.sp
total roundtrip delay from the remote server to the primary reference clock
T}
T{
.sp
0.000488
T}:T{
.sp
seconds
T}:T{
.sp
total dispersion from the remote server to the primary reference clock
T}
T{
.sp
\&.NIST.
T}:T{
.sp
IP or text
T}:T{
.sp
refid, association ID
T}
T{
.sp
0
T}:T{
.sp
integer
T}:T{
.sp
lost packets since last response
T}
T{
.sp
1
T}:T{
.sp
integer
T}:T{
.sp
dropped packets since last request
T}
T{
.sp
2000
T}:T{
.sp
hex integer
T}:T{
.sp
0 if packet accecpted, BOGON flag if packet is discarded
T}
.TE
.sp
.sp
The first two fields show the date (Modified Julian Day) and time
(seconds and fraction past UTC midnight). The next two fields show
the remote IP Address followed by the local address.
The next four fields show the originate,
receive, transmit and final NTP timestamps in order. The timestamp
values are as received and before processing by the various data
smoothing and mitigation algorithms.
.sp
A packet that is accecpted is logged.
At most the first dropped packet per request is logged.
That avoids DDoSing the log file.
.sp
The BOGON flags are decoded \c
.URL "decode.html#flash" "here" "."
.sp
\f(CRsysstats\fP
.RS 4
Enables recording of ntpd statistics counters on a periodic basis.
Each hour a line of the following form is appended to the file
generation set named \fIsysstats\fP:
.RE
.sp
.if n .RS 4
.nf
.fam C
59935 82782.547 3600 36082754 31287166 26510580 4779042 113 19698 1997 428 4773352 0 366120
.fam
.fi
.if n .RE
.TS
allbox tab(:);
lt lt lt.
T{
.sp
Item
T}:T{
.sp
Units
T}:T{
.sp
Description
T}
T{
.sp
\f(CR59935\fP
T}:T{
.sp
MJD
T}:T{
.sp
date
T}
T{
.sp
\f(CR82782.547\fP
T}:T{
.sp
s
T}:T{
.sp
time past midnight
T}
T{
.sp
\f(CR3600\fP
T}:T{
.sp
s
T}:T{
.sp
time since reset
T}
T{
.sp
\f(CR36082754\fP
T}:T{
.sp
#
T}:T{
.sp
packets received
T}
T{
.sp
\f(CR31287166\fP
T}:T{
.sp
#
T}:T{
.sp
packets processed
T}
T{
.sp
\f(CR26510580\fP
T}:T{
.sp
#
T}:T{
.sp
current version
T}
T{
.sp
\f(CR4779042\fP
T}:T{
.sp
#
T}:T{
.sp
old version(s)
T}
T{
.sp
\f(CR113\fP
T}:T{
.sp
#
T}:T{
.sp
access denied
T}
T{
.sp
\f(CR19698\fP
T}:T{
.sp
#
T}:T{
.sp
bad length or format
T}
T{
.sp
\f(CR1997\fP
T}:T{
.sp
#
T}:T{
.sp
bad authentication
T}
T{
.sp
\f(CR428\fP
T}:T{
.sp
#
T}:T{
.sp
declined
T}
T{
.sp
\f(CR4773352\fP
T}:T{
.sp
#
T}:T{
.sp
rate exceeded
T}
T{
.sp
\f(CR0\fP
T}:T{
.sp
#
T}:T{
.sp
kiss\-o\(aq\-death packets sent
T}
T{
.sp
\f(CR366120\fP
T}:T{
.sp
#
T}:T{
.sp
NTPv1 packets received
T}
.TE
.sp
.sp
The first two fields show the date (Modified Julian Day) and time
(seconds and fraction past UTC midnight). The remaining ten fields
show the statistics counter values accumulated since the last
generated line.
.sp
\f(CRusestats\fP
.RS 4
Enables recording of ntpd resource usage statistics.
Each hour a line of the following form is appended to the file
generation set named \fIusestats\fP:
.RE
.sp
.if n .RS 4
.nf
.fam C
57570 83399.541 3600 0.902 1.451 164 0 0 0 2328 64226 1 0 4308
.fam
.fi
.if n .RE
.TS
allbox tab(:);
lt lt lt.
T{
.sp
Item
T}:T{
.sp
Units
T}:T{
.sp
Description
T}
T{
.sp
\f(CR57570\fP
T}:T{
.sp
MJD
T}:T{
.sp
date
T}
T{
.sp
\f(CR83399.541\fP
T}:T{
.sp
s
T}:T{
.sp
time past midnight
T}
T{
.sp
\f(CR3600\fP
T}:T{
.sp
s
T}:T{
.sp
time since reset
T}
T{
.sp
\f(CR0.902\fP
T}:T{
.sp
s
T}:T{
.sp
ru_utime: CPU seconds \- user mode
T}
T{
.sp
\f(CR1.451\fP
T}:T{
.sp
s
T}:T{
.sp
ru_stime: CPU seconds \- system
T}
T{
.sp
\f(CR164\fP
T}:T{
.sp
#
T}:T{
.sp
ru_minflt: page faults \- reclaim/soft (no I/O)
T}
T{
.sp
\f(CR0\fP
T}:T{
.sp
#
T}:T{
.sp
ru_majflt: page faults \- I/O
T}
T{
.sp
\f(CR0\fP
T}:T{
.sp
#
T}:T{
.sp
ru_nswap: process swapped out
T}
T{
.sp
\f(CR0\fP
T}:T{
.sp
#
T}:T{
.sp
ru_inblock: file blocks in
T}
T{
.sp
\f(CR2328\fP
T}:T{
.sp
#
T}:T{
.sp
ru_oublock: file blocks out
T}
T{
.sp
\f(CR64226\fP
T}:T{
.sp
#
T}:T{
.sp
ru_nvcsw: context switches, wait
T}
T{
.sp
\f(CR1\fP
T}:T{
.sp
#
T}:T{
.sp
ru_nivcsw: context switches, preempts
T}
T{
.sp
\f(CR0\fP
T}:T{
.sp
#
T}:T{
.sp
ru_nsignals: signals
T}
T{
.sp
\f(CR4308\fP
T}:T{
.sp
#
T}:T{
.sp
ru_maxrss: resident set size, kilobytes
T}
.TE
.sp
.sp
The first two fields show the date (Modified Julian Day) and time
(seconds and fraction past UTC midnight).  The ru_ tags are the
names from the rusage struct.  See \f(CRman getrusage\fP for details.
(The NetBSD and FreeBSD man pages have more details.)
The maxrss column is the high water mark since the process was started.
The remaining fields show the values used since the last report.
.RE
.sp
\f(CRstatsdir\fP \fIdirectory_path\fP
.RS 4
Indicates the full path of a directory where statistics files should
be created (see below). This keyword allows the (otherwise constant)
\fIfilegen\fP filename prefix to be modified for file generation sets,
which is useful for handling statistics logs.
.RE
.sp
\f(CRfilegen\fP \fIname\fP [\f(CRfile\fP \fIfilename\fP] [\f(CRtype\fP \fItypename\fP] [\f(CRlink\fP | \f(CRnolink\fP] [\f(CRenable\fP | \f(CRdisable\fP]
.RS 4
Configures setting of the generation file set name. Generation file sets
provide a means for handling files that are continuously growing
during the lifetime of a server. Server statistics are a typical
example for such files. Generation file sets provide access to a set
of files used to store the actual data. At any time at most one
element of the set is being written to. The type given specifies
when and how data will be directed to a new element of the set. This
way, information stored in elements of a file set that are currently
unused are available for administrative operations without the
risk of disturbing the operation of ntpd. (Most important: they can
be removed to free space for new data produced.)
.sp
Note that this command can be sent from the
ntpq(1) program running at a remote location.
.sp
\f(CRname\fP
.RS 4
This is the type of the statistics records, as shown in the
\fIstatistics\fP command.
.RE
.sp
\f(CRfile\fP \fIfilename\fP
.RS 4
This is the file name for the statistics records. Filenames of set
members are built from three concatenated elements \fIprefix\fP,
\fIfilename\fP and \fIsuffix\fP:
.RE
.TS
allbox tab(:);
lt lt.
T{
.sp
Attribute
T}:T{
.sp
Description
T}
T{
.sp
\fIprefix\fP
T}:T{
.sp
This is a constant filename path. It is not subject to
modifications via the \fIfilegen\fP option. It is defined by the
server, usually specified as a compile\-time constant. It may,
however, be configurable for individual file generation sets via
other commands. For example, the prefix used with \fIloopstats\fP
and \fIpeerstats\fP generation can be configured using the
\fIstatsdir\fP option explained above.
T}
T{
.sp
\fIfilename\fP
T}:T{
.sp
This string is directly concatenated to the prefix mentioned
above (no intervening ‘/’). This can be modified using the file
argument to the \fIfilegen\fP statement. No \f(CR..\fP elements are
allowed in this component to prevent filenames referring to
parts outside the filesystem hierarchy denoted by \fIprefix\fP.
T}
T{
.sp
\fIsuffix\fP
T}:T{
.sp
This part is reflects individual elements of a
file set. It is generated according to the type of a file set.
T}
.TE
.sp
.sp
\f(CRtype\fP \fItypename\fP
.RS 4
A file generation set is characterized by its type. The following
types are supported:
// The following are tables only because indent lists cannot be
// nested more than 2 deep.
.RE
.TS
allbox tab(:);
lt lt.
T{
.sp
Attribute
T}:T{
.sp
Description
T}
T{
.sp
\f(CRnone\fP
T}:T{
.sp
The file set is actually a single plain file.
T}
T{
.sp
\f(CRpid\fP
T}:T{
.sp
One element of file set is used per incarnation of a ntpd
server. This type does not perform any changes to file set
members during runtime, however it provides an easy way of
separating files belonging to different ntpd(8) server
incarnations. The set member filename is built by appending a
‘.’ to concatenated prefix and filename strings, and appending the
decimal representation of the process ID of the
ntpd(8) server process.
T}
T{
.sp
\f(CRday\fP
T}:T{
.sp
One file generation set element is created per day. A day is
defined as the period between 00:00 and 24:00 UTC. The file set
member suffix consists of a ‘.’ and a day specification in the
form \fIYYYYMMdd\fP. \fIYYYY\fP is a 4\-digit year number (e.g., 1992).
\fIMM\fP is a two digit month number. \fIdd\fP is a two digit day
number. Thus, all information written at 10 December 1992 would
end up in a file named \fIprefix\fP \fIfilename\fP.19921210.
T}
T{
.sp
\f(CRweek\fP
T}:T{
.sp
Any file set member contains data related to a certain
week of a year. The term week is defined by computing
day\-of\-year modulo 7. Elements of such a file generation set
are distinguished by appending the following suffix to the
file set filename base: A dot, a 4\-digit year number, the
letter \fIW\fP, and a 2\-digit week number. For example,
information from January, 10th 1992 would end up in a file
with suffix \fI1992W1\fP.
T}
T{
.sp
\f(CRmonth\fP
T}:T{
.sp
One generation file set element is generated per
month. The file name suffix consists of a dot, a 4\-digit year
number, and a 2\-digit month.
T}
T{
.sp
\f(CRyear\fP
T}:T{
.sp
One generation file element is generated per year.
The filename  suffix consists of a dot and a 4 digit year number.
T}
T{
.sp
\f(CRage\fP$$
T}:T{
.sp
This type of file generation sets changes to a new element of
the file set every 24 hours of server operation. The filename
suffix consists of a dot, the letter \fIa\fP, and an 8\-digit number.
This number is taken to be the number of seconds the server is
running at the start of the corresponding 24\-hour period.
T}
.TE
.sp
.sp
\f(CRlink\fP | \f(CRnolink\fP
.RS 4
It is convenient to be able to access the current element of a
file generation set by a fixed name. This feature is enabled by
specifying \f(CRlink\fP and disabled using \f(CRnolink\fP. If link is
specified, a hard link from the current file set element to a file
without suffix is created. When there is already a file with this
name and the number of links of this file is one, it is renamed
appending a dot, the letter \fIC\fP, and the pid of the ntpd server
process. When the number of links is greater than one, the file is
unlinked. This allows the current file to be accessed by a
constant name.
.RE
.sp
\f(CRenable\fP | \f(CRdisable\fP
.RS 4
Enables or disables the recording function.
Information is only written to a file generation by specifying
\f(CRenable\fP; output is prevented by specifying \f(CRdisable\fP.
.RE
.RE
.SH "ACCESS CONTROL SUPPORT"
.sp
The ntpd(8) daemon implements a general purpose address/mask
based restriction list. The list contains address/match entries sorted
first by increasing address values and then by increasing mask
values. A match occurs when the bitwise AND of the mask and the packet
source address is equal to the bitwise AND of the mask and address in
the list. The list is searched in order with the last match found
defining the restriction flags associated with the entry. Additional
information and examples can be found in the "Notes on Configuring NTP
and Setting up a NTP Subnet" page (available as part of the HTML
documentation).
.sp
The restriction facility was implemented in conformance with the access
policies for the original NSFnet backbone time servers. Later the
facility was expanded to deflect cryptographic and clogging attacks.
While this facility may be useful for keeping unwanted or broken or
malicious clients from congesting innocent servers, it should not be
considered an alternative to the NTP authentication facilities. Source
address based restrictions are easily circumvented by a determined
cracker.
.sp
Clients can be denied service because they are explicitly included in
the restrict list created by the restrict command or implicitly as the
result of cryptographic or rate limit violations. Cryptographic
violations include certificate or identity verification failures; rate
limit violations generally result from defective NTP implementations
that send packets at abusive rates. Some violations cause denied service
only for the offending packet, others cause denied service for a timed
period and others cause the denied service for an indefinite period.
When a client or network is denied access for an indefinite period, the
only way at present to remove the restrictions is by restarting the
server.
.SS "The Kiss\-of\-Death Packet"
.sp
Ordinarily, packets denied service are simply dropped with no further
action except incrementing statistics counters. Sometimes a more
proactive response is needed, such as a server message that explicitly
requests the client to stop sending and leave a message for the system
operator. A special packet format has been created for this purpose
called the "kiss\-of\-death" (KoD) packet. KoD packets have the leap bits
set unsynchronized and stratum set to zero and the reference identifier
field set to a four\-byte ASCII code. If the \f(CRnoserve\fP or \f(CRnotrust\fP flag
of the matching restrict list entry is set, the code is "DENY"; if the
\f(CRlimited\fP flag is set and the rate limit is exceeded, the code is
"RATE". Finally, if a cryptographic violation occurs, the code is
"CRYP".
.sp
A client receiving a KoD performs a set of sanity checks to minimize
security exposure, then updates the stratum and reference identifier
peer variables, sets the access denied (BOGON4) bit in the peer flash
variable and sends a message to the log. As long as the BOGON4 bit is
set, the client will send no further packets to the server. The only way
at present to recover from this condition is to restart the protocol at
both the client and server. This happens automatically at the client
when the association times out. It will happen at the server only if the
server operator cooperates.
.SH "ACCESS CONTROL COMMANDS"
.sp
\f(CRlimit\fP [\f(CRaverage\fP \fIaverage\fP] [\f(CRburst\fP \fIburst\fP] [\f(CRkod\fP \fIkod\fP]
.RS 4
Set the parameters of the \fIlimited\fP facility which protects the server
from client abuse. Internally, each \c
.URL "ntpq.html#mrulist" "MRU"
slot contains a \fIscore\fP in units of packets per second.
It is updated each time a packet arrives from that IP Address.
The \fIscore\fP decays exponentially at the \fIburst\fP rate and is bumped
by 1.0/burst when a packet arrives.
.sp
\f(CRaverage\fP \fIaverage\fP
.RS 4
Specify the allowed average rate for response packets
in packets per second.  The default is 1.0
.RE
.sp
\f(CRburst\fP \fIburst\fP
.RS 4
Specify the allowed burst size if the bursts are far enough apart
to keep the average rate below \fIaverage\fP.  The default is 20.0
.RE
.sp
\f(CRkod\fP \fIkod\fP
.RS 4
Specify the allowed average rate for KoD packets
in packets per second.  The default is 0.5
.RE
.RE
.sp
\f(CRrestrict\fP \fIaddress\fP[/\fIcidr\fP] [\f(CRmask\fP \fImask\fP] [\f(CRflag\fP \f(CR...\fP]
.RS 4
The \fIaddress\fP argument expressed in dotted\-quad (for IPv4) or
:\-delimited (for IPv6) form is the address of a
host or network. Alternatively, the \fIaddress\fP argument can be a valid
host DNS name. The \fImask\fP argument expressed in IPv4 or IPv6 numeric
address form defaults to all mask bits on, meaning that the \fIaddress\fP is
treated as the address of an individual host.  Instead of an explicit
\fImask\fP, the \fIaddress/cidr\fP may be specified in CIDR notation.  A
default entry (address \f(CR0.0.0.0\fP, mask \f(CR0.0.0.0\fP) is always included
and is always the first entry in the list. Note that text string
\fIdefault\fP, with no mask option, may be used to indicate the default
entry. In the current implementation, \fIflag\fP always restricts access,
i.e., an entry with no flags indicates that free access to the server
is to be given. The flags are not orthogonal, in that more restrictive
flags will often make less restrictive ones redundant. The flags can
generally be classed into two categories, those which restrict time
service and those which restrict informational queries and attempts
to do a run\-time reconfiguration of the server. One or more of the
following flags may be specified:
.sp
\f(CRflake\fP
.RS 4
Discard received NTP packets with probability 0.1; that is, on
average drop one packet in ten. This flag is for testing and amusement.
The name comes from Bob Braden\(cqs \fIflakeway\fP, which once did a
similar thing for early Internet testing.
.RE
.sp
\f(CRignore\fP
.RS 4
Deny packets of all kinds, including ntpq(1) queries.
.RE
.sp
\f(CRkod\fP
.RS 4
If this flag is set when an access violation occurs, a kiss\-o\(aq\-death
(KoD) packet is sent. KoD packets are rate limited.
.RE
.sp
\f(CRlimited\fP
.RS 4
Deny service if the packet spacing violates the lower limits
specified in the \fIlimit\fP command. A history of clients is kept using
the monitoring capability of ntpd(8). Thus, monitoring is
always active as long as there is a restriction entry with
the limited flag.
.RE
.sp
\f(CRmssntp\fP
.RS 4
Enable Microsoft Windows MS\-SNTP authentication using Active
Directory services. \fBNote: Potential users should be aware that
these services involve a TCP connection to another process that
could potentially block, denying services to other users. Therefore,
this flag should be used only for a dedicated server with no clients
other than MS\-SNTP.\fP
.RE
.sp
\f(CRnomodify\fP
.RS 4
Deny ntpq(1) queries which attempt
to modify the state of the server (i.e., run time reconfiguration).
Queries which return information are permitted.
.RE
.sp
\f(CRnomrulist\fP
.RS 4
Do not accept MRU\-list requests.  These can be expensive to
service and may generate a high volume of response traffic.
.RE
.sp
\f(CRnopeer\fP
.RS 4
Deny packets which would result in mobilizing a new association;
this includes symmetric active packets when a
configured association does not exist.  That used to happen
when the remote client used the \f(CRpeer\fP command in its config file.
We don\(cqt support that mode.
It used to include \fIpool\fP servers, but they now poke a hole in any
restrictions.
.RE
.sp
\f(CRnoquery\fP
.RS 4
Deny ntpq(1) queries. Time service is not affected.
.RE
.sp
\f(CRnoserve\fP
.RS 4
Deny all packets except ntpq(1) and queries.
.RE
.sp
\f(CRnotrust\fP
.RS 4
Deny service unless the packet is cryptographically authenticated.
.RE
.sp
\f(CRntpport\fP
.RS 4
This is a match algorithm modifier, rather than a
restriction flag. Its presence causes the restriction entry to be
matched if the source port in the packet is the standard NTP
UDP port (123). Both \f(CRntpport\fP and \f(CRnon\-ntpport\fP may be specified.
The \f(CRntpport\fP is considered more specific and is sorted later in the
list.
.RE
.sp
\f(CRversion\fP
.RS 4
Deny packets that do not match the current NTP version.
.RE
.RE
.sp
Note: A second restrict line with the same address/mask
does not replace the first one.  The flags are merged.  Thus:
.sp
.if n .RS 4
.nf
.fam C
restrict bob X
restrict bob Y
.fam
.fi
.if n .RE
.sp
is the same as
.sp
.if n .RS 4
.nf
.fam C
restrict bob X Y
.fam
.fi
.if n .RE
.sp
Default restriction list entries with the flags ignore, interface,
ntpport, for each of the local host\(cqs interface addresses are inserted
into the table at startup to prevent the server from attempting to
synchronize to its own time. A default entry is also always present.
It has \f(CRnoquery\fP to avoid packet length amplification which can
be used for DDoS with a forged return address and \f(CRlimited\fP to
avoid DDoS reflections.
.sp
\f(CRunrestrict\fP \fIaddress\fP[/\fIcidr\fP] [\f(CRmask\fP \fImask\fP] [\f(CRflag\fP \f(CR...\fP]
.RS 4
Like a \f(CRrestrict\fP command, but turns off the specified flags rather
than turning them on (expected to be useful mainly with ntpq
:config). An unrestrict with no flags specified removes any rule
with matching address and mask.  Use only on an address/mask or
CIDR\-format address mentioned in a previous \f(CRrestrict\fP statement.
.RE
.sp
Note: \f(CRunrestrict default\fP will not do anything;
you can\(cqt remove the builtin defaults.
If you want to remove them, use \f(CRunrestrict default noquery limited\fP
to turn off those flags.
.SH "AUTOMATIC NTP CONFIGURATION OPTIONS"
.SS "Manycasting"
.sp
For a detailed description of manycast operation, see the "Server
Discovery" page (available as part of the HTML documentation).
.SS "Manycast Options"
.sp
\f(CRtos\fP [\f(CRceiling\fP \fIceiling\fP | \f(CRfloor\fP \fIfloor\fP | \f(CRminclock\fP \fIminclock\fP | \f(CRminsane\fP \fIminsane\fP]
.RS 4
This command affects the clock selection and clustering algorithms. It
can be used to select the quality and quantity of peers used to
synchronize the system clock and is most useful in manycast mode. The
variables operate as follows:
.sp
\f(CRceiling\fP \fIceiling\fP
.RS 4
Peers with strata above \fIceiling\fP will be discarded if there are at
least \fIminclock\fP peers remaining. This value defaults to 15, but can
be changed to any number from 1 to 15.
.RE
.sp
\f(CRfloor\fP \fIfloor\fP
.RS 4
Peers with strata below \fIfloor\fP will be discarded if there are at
least \fIminclock\fP peers remaining. This value defaults to 1, but can
be changed to any number from 1 to 15.
.RE
.sp
\f(CRminclock\fP \fIminclock\fP
.RS 4
The clustering algorithm repeatedly casts out outlier associations
until no more than \fIminclock\fP associations remain. This value
defaults to 3, but can be changed to any number from 1 to the number
of configured sources.
.RE
.sp
\f(CRminsane\fP \fIminsane\fP
.RS 4
This is the minimum number of candidates available to the clock
selection algorithm in order to produce one or more truechimers for
the clustering algorithm. If fewer than this number are available,
the clock is undisciplined and allowed to run free. The default is 1
for legacy purposes. However, according to principles of Byzantine
agreement, \fIminsane\fP should be at least 4 in order to detect and
discard a single falseticker.
.RE
.RE
.SH "REFERENCE CLOCK SUPPORT"
.sp
For a detailed description of reference\-clock configuration, see the
"Reference Clock Drivers" page (available as part of the HTML
documentation provided in \f(CR/usr/share/doc/ntp\fP).
.SH "REFERENCE CLOCK COMMANDS"
.sp
\f(CRrefclock\fP \fIdrivername\fP [\f(CRunit\fP \fIu\fP] [\f(CRprefer\fP] [\f(CRsubtype\fP \fIint\fP] [\f(CRmode\fP \fIint\fP] [\f(CRminpoll\fP \fIint\fP] [\f(CRmaxpoll\fP \fIint\fP] [\f(CRtime1\fP \fIsec\fP] [\f(CRtime2\fP \fIsec\fP] [\f(CRstratum\fP \fIint\fP] [\f(CRrefid\fP \fIstring\fP] [\f(CRpath\fP \fIfilename\fP] [\f(CRppspath\fP \fIfilename\fP] [\f(CRbaud\fP \fInumber\fP] [\f(CRflag1\fP {\f(CR0\fP | \f(CR1\fP}] [\f(CRflag2\fP {\f(CR0\fP | \f(CR1\fP}] [\f(CRflag3\fP {\f(CR0\fP | \f(CR1\fP}] [\f(CRflag4\fP {\f(CR0\fP | \f(CR1\fP}]
.RS 4
This command is used to configure reference clocks.
The required \fIdrivername\fP argument is the shortname of a driver type
(e.g., \f(CRshm\fP, \f(CRnmea\fP, \f(CRgeneric\fP;
see the \c
.URL "refclock.html" "Reference Clock Drivers"
page for a full list. The options are interpreted as follows:
.sp
\f(CRunit\fP
.RS 4
The 0\-origin unit number of the device; this modifies the devicename.
If not specified, defaults to zero.
.RE
.sp
\f(CRprefer\fP
.RS 4
Marks the reference clock as preferred. All other things being
equal, this host will be chosen for synchronization among a set of
correctly operating hosts and clocks. See the "Mitigation Rules
and the prefer Keyword" page (available as part of the HTML
documentation provided in \f(CR/usr/share/doc/ntp\fP) for further
information.
.RE
.sp
\f(CRsubtype\fP \fIint\fP
.RS 4
Some drivers (notably the generic and jjy drivers) support
multiple device types.  This option selects among them in
a driver\-dependent way.
.RE
.sp
\f(CRmode\fP \fIint\fP
.RS 4
Specifies a mode number which is interpreted in a device\-specific
fashion. For instance, it selects a dialing protocol in the ACTS
driver and a sentence mix in the nmea driver.
.RE
.sp
\f(CRminpoll\fP \fIint\fP; \f(CRmaxpoll\fP \fIint\fP
.RS 4
These options specify the minimum and maximum polling interval for
reference clock messages, as a power of 2 in seconds. For most
directly connected reference clocks, both \fIminpoll\fP and \fImaxpoll\fP
default to 6 (64 sec). For modem reference clocks, \fIminpoll\fP defaults
to 10 (17.1 min) and \fImaxpoll\fP defaults to 14 (4.5 hours). The allowable
range is 0 (1 sec) to 17 (36.4 hours) inclusive.
.RE
.sp
\f(CRtime1\fP \fIsec\fP
.RS 4
Specifies a constant to be added to the time offset produced by the
driver, a fixed\-point decimal number in seconds. Each "g" on the
end of the constant adds the number of seconds in a 10\-bit GPS
era; each "G" adds the number of seconds in a 13\-bit GPS era. This
is used as a calibration constant to adjust the nominal time offset
of a particular clock to agree with an external standard, such as a
precision PPS signal. It also provides a way to correct a systematic
error or bias due to era wraparound from a GPS device,
serial port or operating system latencies,
different cable lengths or receiver internal delay. The specified
offset is in addition to the propagation delay provided by other
means, such as internal DIP switches. Where a calibration for an
individual system and driver is available, an approximate correction
is noted in the driver documentation pages. Note: To
facilitate calibration when more than one radio clock or PPS signal
is supported, a special calibration feature is available. It takes
the form of an argument to the \f(CRenable\fP command described in
"Miscellaneous Options" page and operates as described in the
"Reference Clock Drivers" page.
.RE
.sp
\f(CRtime2\fP \fIsecs\fP
.RS 4
Specifies a fixed\-point decimal number in seconds, which is
interpreted in a driver\-dependent way. See the descriptions of
specific drivers in the "Reference Clock Drivers" page.
.RE
.sp
\f(CRstratum\fP \fIint\fP
.RS 4
Specifies the stratum number assigned to the driver, an integer
between 0 and 15. This number overrides the default stratum number
ordinarily assigned by the driver itself, usually zero.
.RE
.sp
\f(CRrefid\fP \fIstring\fP
.RS 4
Specifies an ASCII string of from one to four characters which
defines the reference identifier used by the driver. This string
overrides the default identifier ordinarily assigned by the driver
itself.
.RE
.sp
\f(CRpath\fP \fIfilepath\fP
.RS 4
Overrides the default device location for this refclock.
.RE
.sp
\f(CRppspath\fP \fIfilepath\fP
.RS 4
Overrides the default PPS device location (if any) for this driver.
.RE
.sp
\f(CRbaud\fP \fInumber\fP
.RS 4
Overrides the defaults baud rate for this driver.
.RE
.sp
\f(CRflag1\fP \f(CR{0 | 1}\fP; \f(CRflag2\fP \f(CR{0 | 1}\fP; \f(CRflag3\fP \f(CR{0 | 1}\fP; \f(CRflag4\fP \f(CR{0 | 1}\fP
.RS 4
These four flags are used for customizing the clock driver. The
interpretation of these values, and whether they are used at all, is
a function of the particular clock driver. However, by convention
\f(CRflag4\fP is used to enable recording monitoring data to the
\fIclockstats\fP file configured with the \fIfilegen\fP command. Further
information on the \fIfilegen\fP command can be found in "Monitoring
Options".
.RE
.RE
.SH "MISCELLANEOUS OPTIONS"
.sp
\f(CRdriftfile\fP \fIdriftfile\fP
.RS 4
This command specifies the complete path and name of the file used to
record the frequency of the local clock oscillator; this is the same
operation as the \f(CR\-f\fP command line option. If the file exists, it is
read at startup to set the initial frequency and then updated
once per hour with the current frequency computed by the daemon. If
the file name is specified, but the file itself does not exist, \f(CRntpd\fP
starts with an initial frequency of zero and creates the file when
writing it for the first time. If this command is not given, the
daemon will always start with an initial frequency of zero.
.sp
The file format consists of a single line containing a single floating
point number, which records the frequency offset measured in
parts\-per\-million (PPM). The file is updated by first writing the
current drift value into a temporary file and then renaming this file
to replace the old version; this implies that ntpd(8) must
have write permission for the directory the drift file is located in,
and that file system links, symbolic or otherwise, should be avoided.
.RE
.sp
\f(CRenable\fP [\f(CRauth\fP | \f(CRcalibrate\fP | \f(CRkernel\fP | \f(CRmonitor\fP | \f(CRntp\fP | \f(CRstats\fP]; \f(CRdisable\fP [\f(CRauth\fP | \f(CRcalibrate\fP | \f(CRkernel\fP | \f(CRmonitor\fP | \f(CRntp\fP | \f(CRstats\fP]
.RS 4
Provides a way to enable or disable various server options. Flags not
mentioned are unaffected. Note that all of these flags can be
controlled remotely using the ntpq(1) utility program.
.sp
\f(CRauth\fP
.RS 4
Enables the server to synchronize with unconfigured peers only if
the peer has been correctly authenticated. The default for this
flag is \f(CRenable\fP.
.RE
.sp
\f(CRcalibrate\fP
.RS 4
Enables the calibrate feature for reference clocks. The default for
this flag is \f(CRdisable\fP.
.RE
.sp
\f(CRkernel\fP
.RS 4
Enables the kernel time discipline, if available. The default for
this flag is \f(CRenable\fP if support is available, otherwise \f(CRdisable\fP.
.RE
.sp
\f(CRmonitor\fP
.RS 4
Enables the monitoring facility. See the ntpq(1) program
and the monlist command for further information. The default for this
flag is \f(CRenable\fP.
.RE
.sp
\f(CRntp\fP
.RS 4
Enables time and frequency discipline. In effect, this switch opens
and closes the feedback loop, which is useful for testing. The
default for this flag is \f(CRenable\fP.
.RE
.sp
\f(CRstats\fP
.RS 4
Enables the statistics facility. See the "Monitoring Options"
section for further information. The default for this flag is
\f(CRdisable\fP.
.RE
.RE
.sp
\f(CRincludefile\fP \fIincludefile\fP
.RS 4
This command allows additional configuration commands to be included
from a separate file. Include files may be nested to a depth of
five; upon reaching the end of any include file, command processing
resumes in the previous configuration file. Relative pathnames are
evaluated not with respect to the current working directory but with
respect to the directory name of the last pushed file in the
stack. This option is useful for sites that run ntpd(8) on
multiple hosts, with (mostly) common options (e.g., a restriction
list).
.RE
.sp
\f(CRinterface\fP [\f(CRlisten\fP | \f(CRignore\fP | \f(CRdrop\fP] [\f(CRall\fP | \f(CRipv4\fP | \f(CRipv6\fP | \f(CRwildcard\fP | \fIname\fP | \fIaddress\fP[/\fIprefixlen\fP]]
.RS 4
This command controls which network addresses \f(CRntpd\fP opens, and
whether the input is dropped without processing. The first parameter
determines the action on addresses which match the second parameter.
That parameter specifies a class of addresses, or a specific interface
name, or an address. In the address case, \fIprefixlen\fP determines how
many bits must match for this rule to apply. \f(CRignore\fP prevents opening
matching addresses, \f(CRdrop\fP causes \f(CRntpd\fP to open the address and drop
all received packets without examination. Multiple \f(CRinterface\fP
commands can be used. The last rule which matches a particular address
determines the action for it. \f(CRinterface\fP commands are disabled if any
of the \f(CR\-I\fP, \f(CR\-\-interface\fP,\f(CR\-L\fP, or \f(CR\-\-novirtualips\fP command\-line options
are used. If none of those options are used, and no \f(CRinterface\fP actions
are specified in the configuration file, all available network
addresses are opened. The \f(CRnic\fP command is an alias for \f(CRinterface\fP.
.RE
.sp
\f(CRleapfile\fP \fIleapfile\fP
.RS 4
This command loads the NIST leap seconds file and initializes the
leapsecond values for the next leap second time, expiration time and
TAI offset. The file can be obtained using \f(CRntpleapfetch\fP.
.sp
The \fIleapfile\fP is scanned when \f(CRntpd\fP processes the \f(CRleapfile\fP
directive or when \f(CRntpd\fP detects that \fIleapfile\fP has changed. \f(CRntpd\fP
checks once a day to see if the \fIleapfile\fP has changed.
.RE
.sp
\f(CRleapsmearinterval\fP \fIinterval\fP
.RS 4
This \fBexperimental\fP option is only available if ntpd was built
with the \f(CR\-\-enable\-leap\-smear\fP option, It specifies the interval
over which a leap second correction will be applied.  Recommended
values for this option are between 7200 (2 hours) and 86400 (24
hours).  DO NOT USE THIS OPTION ON PUBLIC\-ACCESS SERVERS!  See
.URL "http://bugs.ntp.org/2855" "" " "
for more information.
.RE
.sp
\f(CRlogconfig\fP \fIconfigkeyword\fP
.RS 4
This command controls the amount and type of output written to the
system \fIsyslog(3)\fP facility or the alternate log file. By
default, all output is turned on. All \fIconfigkeyword\fP keywords can be
prefixed with ‘=’, ‘\f(CR’ and ‘\-’, where ‘=’ sets the syslog(3) priority
mask, ‘\fP’ adds and ‘\-’ removes messages. syslog(3) messages can be
controlled in four classes (clock,peer,sys and sync). Within these
classes four types of messages can be controlled: informational
messages (info), event messages (events), statistics messages
(statistics) and status messages (status).
.sp
Configuration keywords are formed by concatenating the message class
with the event class. The \fIall\fP prefix can be used instead of a
message class. A message class may also be followed by the \fIall\fP
keyword to enable/disable all messages of the respective message
class. Thus, a minimal log configuration could look like this:
.sp
.if n .RS 4
.nf
.fam C
logconfig =syncstatus +sysevents
.fam
.fi
.if n .RE
.sp
This would just list the synchronizations state of
ntpd(8) and the major system events. For a simple reference
server, the following minimum message configuration could be useful:
.sp
.if n .RS 4
.nf
.fam C
logconfig =syncall +clockall
.fam
.fi
.if n .RE
.sp
This configuration will list all clock information and synchronization
information. All other events and messages about peers, system events
and so on is suppressed.
.RE
.sp
\f(CRlogfile\fP \fIlogfile\fP
.RS 4
This command specifies the location of an alternate log file to be
used instead of the default system \fIsyslog(3)\fP facility; this is the
same operation as the \-l command line option.
.RE
.sp
If your ntpd runs for a long time, you probably want to use logrotate or
newsyslog to switch to a new log file occasionally.  SIGHUP will reopen
the log file.
.sp
\f(CRmru\fP [\f(CRmaxdepth\fP \fIcount\fP | \f(CRmaxmem\fP \fIkilobytes\fP | \f(CRmindepth\fP \fIcount\fP | \f(CRmaxage\fP \fIseconds\fP | \f(CRminage\fP \fIseconds\fP | \f(CRinitalloc\fP \fIcount\fP | \f(CRinitmem\fP \fIkilobytes\fP | \f(CRincalloc\fP \fIcount\fP | \f(CRincmem\fP \fIkilobytes\fP]
.RS 4
Controls size limits of the monitoring facility Most Recently Used
(MRU) list of client addresses, which is also
used by the rate control facility.
.sp
\f(CRmaxdepth\fP \fIcount\fP, \f(CRmaxmem\fP \fIkilobytes\fP
.RS 4
Equivalent upper limits on the size of the MRU list, in terms of
entries or kilobytes. The actual limit will be up to \f(CRincalloc\fP
entries or \f(CRincmem\fP kilobytes larger. As with all of the \f(CRmru\fP
options offered in units of entries or kilobytes, if both \f(CRmaxdepth\fP
and \f(CRmaxmem\fP are used, the last one used controls. The default is
1024 kilobytes.
.RE
.sp
\f(CRmindepth\fP \fIcount\fP
.RS 4
The lower limit on the MRU list size. When the MRU list has fewer than
\f(CRmindepth\fP entries, existing entries are never removed to make room
for newer ones, regardless of their age. The default is 600 entries.
.RE
.sp
\f(CRmaxage\fP \fIseconds\fP, \f(CRminage\fP \fIseconds\fP
.RS 4
If an address is not in the list, there are several possible ways
to find a slot for it.
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 1." 4.2
.\}
If the list has fewer than \f(CRmindepth\fP entries, a slot is
allocated from the free list; this is the normal case for a
server without a lot of clients.  If clients come and go, for
example, laptops going between home and work, the default setup
shows only the long term average.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 2." 4.2
.\}
If the age of the oldest slot is greater than \f(CRmaxage\fP, the oldest
slot is recycled (default 3600 seconds).
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 3." 4.2
.\}
If the freelist is not empty, a slot is allocated from the
free list.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 4." 4.2
.\}
If the freelist is empty but not full (see maxmem), more memory
is allocated (see incmem) and, a new slot is used.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 5." 4.2
.\}
If the age of the oldest slot is more than \f(CRminage\fP, the oldest
slot is recycled (default 64 seconds).
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 6." 4.2
.\}
Otherwise, no slot is available.
.RE
.RE
.sp
\f(CRinitalloc\fP \fIcount\fP, \f(CRinitmem\fP \fIkilobytes\fP
.RS 4
Initial memory allocation at the time the monitoring facility is
first enabled, in terms of entries or kilobytes. The default is 4
kilobytes.
.RE
.sp
\f(CRincalloc\fP \fIcount\fP, \f(CRincmem\fP \fIkilobytes\fP
.RS 4
Size of additional memory allocations when growing the MRU list, in
entries or kilobytes. The default is 4 kilobytes.
.RE
.RE
.sp
\f(CRnonvolatile\fP \fIthreshold\fP
.RS 4
Specify the \fIthreshold\fP in seconds to write the frequency file, with
a default of 1e\-7 (0.1 PPM). The frequency file is inspected each hour.
If the difference between the current frequency and the last value
written exceeds the threshold, the file is written, and the \f(CRthreshold\fP
becomes the new threshold value. If the threshold is not exceeded, it
is reduced by half; this is intended to reduce the frequency of
unnecessary file writes for embedded systems with nonvolatile memory.
.RE
.sp
\f(CRphone\fP \fIdial ...\fP
.RS 4
This command is used in conjunction with the ACTS modem driver (type
modem) or the JJY driver (type jjy). For ACTS, the arguments consist
of a maximum of 10 telephone numbers used to dial USNO, NIST or
European time services. For the jjy driver in modes 100\-180, the
argument is one telephone number used to dial the telephone JJY
service. The Hayes command ATDT is normally prepended to the number,
which can contain other modem control codes as well.
.RE
.sp
\f(CRreset [allpeers] [auth] [ctl] [io] [mem] [sys] [timer]\fP
.RS 4
Reset one or more groups of counters maintained by ntpd and exposed by
\f(CRntpq\fP.
.RE
.sp
\f(CRsetvar\fP \fIvariable\fP [\fIdefault\fP]
.RS 4
This command adds a system variable. These variables can
be used to distribute additional information such as the access
policy. If the variable of the form \fIname=value\fP is followed by the
\f(CRdefault\fP keyword, the variable will be listed as part of the default
system variables (ntpq(1) rv command). These additional
variables serve informational purposes only. They are not related to
the protocol other that they can be listed. The known protocol
variables will always override any variables defined via
the \f(CRsetvar\fP mechanism. There are three special variables that contain the
names of all variable of the same group. The \f(CRsys_var_list\fP holds the
names of all system variables. The \f(CRpeer_var_list\fP holds the names of all
peer variables and the \f(CRclock_var_list\fP holds the names of the reference
clock variables.
.RE
.sp
\f(CRtinker\fP [\f(CRallan\fP \fIallan\fP | \f(CRdispersion\fP \fIdispersion\fP | \f(CRfreq\fP \fIfreq\fP | \f(CRhuffpuff\fP \fIhuffpuff\fP | \f(CRpanic\fP \fIpanic\fP | \f(CRstep\fP \fIstep\fP | \f(CRstepback\fP \fIstepback\fP | \f(CRstepfwd\fP \fIstepfwd\fP | \f(CRstepout\fP \fIstepout\fP]
.RS 4
This command can be used to alter several system variables in very
exceptional circumstances. It should occur in the configuration file
before any other configuration options. The default values of these
variables have been carefully optimized for a wide range of network
speeds and reliability expectations. In general, they interact in
intricate ways that are hard to predict, and some combinations can
result in some very nasty behavior. Very rarely is it necessary to
change the default values; but, some folks cannot resist twisting the
knobs anyway, and this command is for them. Emphasis added: twisters
are on their own and can expect no help from the support group.
.sp
The variables operate as follows:
.sp
\f(CRallan\fP \fIallan\fP
.RS 4
The argument becomes the new value for the minimum Allan intercept,
which is a parameter of the PLL/FLL clock discipline algorithm. The
value in log2 seconds defaults to 11 (2048 s), which is also the
lower limit.
.RE
.sp
\f(CRdispersion\fP \fIdispersion\fP
.RS 4
The argument becomes the new value for the dispersion increase rate,
normally .000015 s/s.
.RE
.sp
\f(CRfreq\fP \fIfreq\fP
.RS 4
The argument becomes the initial value of the frequency offset in
parts\-per\-million; this overrides the value in the frequency file,
if present, and avoids the initial training state if it is not.
.RE
.sp
\f(CRhuffpuff\fP \fIhuffpuff\fP
.RS 4
The argument becomes the new value for the experimental huff\-n\(aq\-puff
filter span, which determines the most recent interval the algorithm
will search for a minimum delay. The lower limit is 900 s (15 m),
but a more reasonable value is 7200 (2 hours). There is no default
since the filter is not enabled unless this command is given.
.RE
.sp
\f(CRpanic\fP \fIpanic\fP
.RS 4
The argument is the panic threshold, normally 1000 s. If set to
zero, the panic sanity check is disabled, and a clock offset of any
value will be accepted.
.RE
.sp
\f(CRstep\fP \fIstep\fP
.RS 4
The argument is the step threshold, which by default is 0.128 sec. It
can be set to any positive number in seconds. If set to zero, step
adjustments will never occur. Note: The kernel time discipline is
disabled if the step threshold is set to zero or greater than the
default.
.RE
.sp
\f(CRstepback\fP \fIstepback\fP
.RS 4
The argument is the step threshold for the backward direction, which
by default is 0.128 sec. It can be set to any positive number in
seconds. If both the forward and backward step thresholds are set to
zero, step adjustments will never occur. Note: The kernel time
discipline is disabled if each direction of step threshold are
either set to zero or greater than .5 second.
.RE
.sp
\f(CRstepfwd\fP \fIstepfwd\fP
.RS 4
As for stepback, but for the forward direction.
.RE
.sp
\f(CRstepout\fP \fIstepout\fP
.RS 4
The argument is the stepout timeout, which by default is 900 s. It
can be set to any positive number in seconds. If set to zero, the
stepout pulses will not be suppressed.
.RE
.RE
.sp
\f(CRrlimit\fP [\f(CRmemlock\fP \fImegabytes\fP | \f(CRstacksize\fP \fI4kPages\fP | \f(CRfilenum\fP \fIfiledescriptors\fP]
.RS 4
.sp
\f(CRmemlock\fP \fImegabytes\fP
.RS 4
Ignored for backward compatibility.
.RE
.sp
\f(CRstacksize\fP \fI4kPages\fP
.RS 4
Specifies the maximum size of the process stack on systems with the
\f(CRmlockall()\fP function. Defaults to 50 4k pages.
.RE
.sp
\f(CRfilenum\fP \fIfiledescriptors\fP
.RS 4
Specifies the maximum number of file descriptors ntpd may have open
at once. Defaults to the system default.
.RE
.RE
.SH "FILES"
.sp
\f(CR/etc/ntp.conf\fP
.RS 4
the default name of the configuration file
.RE
.sp
\f(CRntp.keys\fP
.RS 4
private keys
.RE
.sp
One of the following exit values will be returned:
.sp
0 (EXIT_SUCCESS)
.RS 4
Successful program execution.
.RE
.sp
1 (EXIT_FAILURE)
.RS 4
The operation failed or the command syntax was not valid.
.RE
.SH "SEE ALSO"
.sp
ntpd(8), ntpq(1).
.sp
In addition to the manual pages provided, comprehensive documentation is
available on the world wide web at \c
.URL "https://www.ntpsec.org" "" "."
A snapshot of
this documentation is available in HTML format in \f(CR/usr/share/doc/ntp\fP.
.sp
David L. Mills, \fINetwork Time Protocol (Version 4)\fP, RFC 5905
.SH "BUGS"
.sp
The syntax checking is not picky; some combinations of ridiculous and
even hilarious options and modes may not be detected.