'\" t
.\"     Title: ntpq
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 2.0.12
.\"      Date: 2022-12-29
.\"    Manual: NTPsec
.\"    Source: NTPsec
.\"  Language: English
.\"
.TH "NTPQ" "1" "2022-12-29" "NTPsec" "NTPsec"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
ntpq \- standard NTP query program
.SH "SYNOPSIS"
.sp
\f(CRntpq\fP [\f(CR\-46adhinpkwWu\fP] [\f(CR\-c\fP \fIcommand\fP] [\fIhost\fP] [...]
.SH "DESCRIPTION"
.sp
The \f(CRntpq\fP utility program is used to monitor NTP daemon \f(CRntpd\fP
operations and determine performance. It uses the standard NTP mode 6
control message formats defined in Appendix B of the NTPv3 specification
RFC 1305. The same formats are used in NTPv4, although some of the
variable names have changed, and new ones added. The description on this
page is for the NTPv4 variables.
.sp
The program can be run either in interactive mode or controlled using
command line arguments. Requests to read and write arbitrary variables
can be assembled, with raw and pretty\-printed output options being
available. It can also obtain and print a list of peers in a
common format by sending multiple queries to the server.
.sp
If one or more request options are included on the command line when
\f(CRntpq\fP is executed, each of the requests will be sent to the NTP servers
running on each of the hosts given as command line arguments, or on
localhost by default. If no request options are given, \f(CRntpq\fP will
attempt to read commands from the standard input and execute these on
the NTP server running on the first host given on the command line,
again defaulting to localhost when no other host is specified. \f(CRntpq\fP
will prompt for commands if the standard input is a terminal device.
.sp
\f(CRntpq\fP uses NTP mode 6 packets to communicate with the NTP server, and
hence can be used to query any compatible server on the network which
permits it. Note that since NTP is a UDP protocol this communication
will be somewhat unreliable, especially over large distances in terms of
network topology. \f(CRntpq\fP makes one attempt to retransmit requests and
will time requests out if the remote host is not heard from within a
suitable timeout time.
.sp
Note that in contexts where a host name is expected, a \f(CR\-4\fP qualifier
preceding the host name forces DNS resolution to the IPv4 namespace,
while a \f(CR\-6\fP qualifier forces DNS resolution to the IPv6 namespace.
.sp
For examples and usage, see the \c
.URL "debug.html" "NTP Debugging
Techniques"  page.
.sp
For a simpler near\-real\-time monitor, see ntpmon(1).
.SH "OPTIONS"
.sp
Command line options are described following. Specifying the command line
options \f(CR\-c\fP or \f(CR\-p\fP will cause the specified query (queries) to be sent
to the indicated host(s) immediately. Otherwise, \f(CRntpq\fP will attempt to
read interactive format commands from the standard input.
.sp
\f(CR\-4\fP, \f(CR\-\-ipv4\fP
.RS 4
Force DNS resolution of following host names on the command line to
the IPv4 namespace.
.RE
.sp
\f(CR\-6\fP, \f(CR\-\-ipv6\fP
.RS 4
Force DNS resolution of following host names on the command line to
the IPv6 namespace.
.RE
.sp
\f(CR\-a\fP num, \f(CR\-\-authentication\fP=num
.RS 4
Enable authentication with the numbered key.
.RE
.sp
\f(CR\-c\fP cmd, \f(CR\-\-command\fP=cmd
.RS 4
The following argument is interpreted as an interactive format command
and is added to the list of commands to be executed on the specified
host(s). Multiple \f(CR\-c\fP options may be given.
.RE
.sp
\f(CR\-d\fP, \f(CR\-\-debug\fP
.RS 4
Increase debugging level by 1.
.RE
.sp
\f(CR\-D\fP num, \f(CR\-\-set\-debug\-level\fP=num
.RS 4
The debug level is set to the following integer argument.
.RE
.sp
\f(CR\-l\fP filename, \f(CR\-\-logfile\fP=filename
.RS 4
Log debugging output to the specified file.
.RE
.sp
\f(CR\-h\fP, \f(CR\-\-help\fP
.RS 4
Print a usage message summarizing options end exit.
.RE
.sp
\f(CR\-n\fP, \f(CR\-\-numeric\fP
.RS 4
Output all host addresses in numeric format rather than
converting to the canonical host names.  You may get hostnames
anyway for peers in the initialization phase before DNS has resolved
the peer name.
.RE
.sp
\f(CR\-s\fP, \f(CR\-\-srcname\fP
.RS 4
Output host addresses by: Names passed to ntpd, then names reverse
resolved from addresses and finally, IP addresses themselves
.RE
.sp
\f(CR\-S\fP, \f(CR\-\-srcnumber\fP
.RS 4
Output host addresses by: Names passed to ntpd, then IP addresses
themselves
.RE
.sp
\f(CR\-p\fP, \f(CR\-\-peers\fP
.RS 4
Print a list of the peers known to the server as well as a summary of
their state; this is equivalent to the \f(CRpeers\fP interactive command.
The refid field is as described under "Event Messages and Status
Words" in the NTP documentation on the Web.
.RE
.sp
\f(CR\-k\fP filename, \f(CR\-\-keyfile\fP=filename
.RS 4
Specify a keyfile. ntpq will look in this file for the key specified
with \-a.
.RE
.sp
\f(CR\-V\fP, \f(CR\-\-version\fP
.RS 4
Print the version string and exit.
.RE
.sp
\f(CR\-w\fP, \f(CR\-\-wide\fP
.RS 4
Wide mode: if the host name or IP Address doesn\(cqt fit, write the
full name/address and indent the next line, so columns line up.
The default truncates the name or address.
.RE
.sp
\f(CR\-W\fP num, \f(CR\-\-width\fP=num
.RS 4
Force the terminal width.  Only relevant for composition of the
peers display.
.RE
.sp
\f(CR\-u\fP, \f(CR\-\-units\fP
.RS 4
Display timing information with units.
.RE
.SH "INTERNAL COMMANDS"
.sp
Interactive format commands consist of a keyword followed by zero to
four arguments. Only enough characters of the full keyword to uniquely
identify the command need be typed. The output of a command is normally
sent to the standard output, but optionally the output of individual
commands may be sent to a file by appending a \f(CR>\fP, followed by a file
name, to the command line. Some interactive format commands are
executed entirely within the \f(CRntpq\fP program itself and do not result in
NTP mode 6 requests being sent to a server. These are described
as following.
.sp
\f(CR?\fP [\fIcommand_keyword\fP], \f(CRhelp\fP [\fIcommand_keyword\fP]
.RS 4
A \f(CR?\fP by itself will print a list of all the command keywords known to
\f(CRntpq\fP. A \f(CR?\fP followed by a command keyword will print function and
usage information about the command.
.RE
.sp
\f(CRaddvars\fP \fIname\fP [ = value] [...]; \f(CRrmvars\fP \fIname\fP [...]; \f(CRclearvars\fP
.RS 4
The arguments to this command consist of a list of items of the form
\f(CRname = value\fP, where the \f(CR= value\fP is ignored and can be omitted in
read requests. \f(CRntpq\fP maintains an internal list in which data to be
included in control messages can be assembled and sent using the
\f(CRreadlist\fP and \f(CRwritelist\fP commands described below. The \f(CRaddvars\fP
command allows variables and optional values to be added to the list.
If more than one variable is to be added, the list should be
comma\-separated and not contain white space. The \f(CRrmvars\fP command can
be used to remove individual variables from the list, while the
\f(CRclearlist\fP command removes all variables from the list.
.RE
.sp
\f(CRauthenticate\fP [yes | no]
.RS 4
Normally \f(CRntpq\fP does not authenticate requests unless they are
write requests. The command \f(CRauthenticate yes\fP causes \f(CRntpq\fP to
send authentication with all requests it makes. Authenticated
requests causes some servers to handle requests slightly
differently. The command \f(CRauthenticate\fP without arguments causes
\f(CRntpq\fP to display whether or not \f(CRntpq\fP is currently
authenticating requests.
.RE
.sp
\f(CRcooked\fP
.RS 4
Display server messages in prettyprint format.
.RE
.sp
\f(CRdebug more | less | off\fP
.RS 4
Turns internal query program debugging on and off.
.RE
.sp
\f(CRnoflake\fP, +doflake \fIprobability\fP
.RS 4
Disables or enables the dropping of control packets by ntpq for testing.
Probabilities 0 and 1 should be certainly accepted and discarded
respectively. No default, but 0.1 should be a one in ten loss rate.
.RE
.sp
\f(CRlogfile <stderr> | filename\fP
.RS 4
Displays or sets the file for debug logging. <stderr> will send logs
to standard error.
.RE
.sp
\f(CRdelay\fP \fImilliseconds\fP
.RS 4
Specify a time interval to be added to timestamps included in requests
which require authentication; this is used to enable (unreliable)
server reconfiguration over long delay network paths or between
machines whose clocks are unsynchronized. The server does not
now require timestamps in authenticated requests so that this command may
be obsolete.
.RE
.sp
\f(CRexit\fP
.RS 4
Exit \f(CRntpq\fP.
.RE
.sp
\f(CRhost\fP \fIname\fP
.RS 4
Set the host to which future queries will be sent. The name may be
either a DNS name or a numeric address.
.RE
.sp
\f(CRhostnames [yes | no]\fP
.RS 4
If \f(CRyes\fP is specified, host names are printed in information displays.
If \f(CRno\fP is specified, numeric addresses are printed instead. The
default is \f(CRyes\fP unless modified using the command line \f(CR\-n\fP switch.
.RE
.sp
\f(CRkeyid\fP \fIkeyid\fP
.RS 4
This command specifies the key number to be used to authenticate
configuration requests; this must correspond to a key ID configured
with the \f(CRcontrolkey\fP command in the server\(cqs \f(CRntp.conf\fP
.RE
.sp
\f(CRkeytype\fP
.RS 4
Specify the digest algorithm to use for authenticated requests, with
default \f(CRMD5\fP. The keytype must match what the server is expecting
for the specified key ID.
.RE
.sp
\f(CRntpversion 1 | 2 | 3 | 4\fP
.RS 4
Sets the NTP version number which \f(CRntpq\fP claims in packets. Defaults
to 2, Note that mode 6 control messages (and modes, for that matter)
didn\(cqt exist in NTP version 1.
.RE
.sp
\f(CRpasswd\fP
.RS 4
This command prompts for a password to authenticate requests. The
password must match what the server is expecting.  Passwords longer
than 20 bytes are assumed to be hex encoding.
.RE
.sp
\f(CRquit\fP
.RS 4
Exit \f(CRntpq\fP.
.RE
.sp
\f(CRraw\fP
.RS 4
Display server messages as received and without reformatting.
The only formatting/interpretation done on the data is
to transform non\-ASCII data into a printable (but barely
understandable) form.
.RE
.sp
\f(CRtimeout\fP \fImilliseconds\fP
.RS 4
Specify a timeout period for responses to server queries. The default
is about 5000 milliseconds. Note that since \f(CRntpq\fP retries each query
once after a timeout, the total waiting time for a timeout will be
twice the timeout value set.
.RE
.sp
\f(CRunits\fP
.RS 4
Toggle whether times in the peers display are shown with units.
.RE
.sp
\f(CRversion\fP
.RS 4
Print the version of the \f(CRntpq\fP program.
.RE
.SH "CONTROL MESSAGE COMMANDS"
.sp
Association IDs are used to identify system, peer and clock variables.
System variables are assigned an association ID of zero and system name
space, while each association is assigned a nonzero association ID and
peer namespace. Most control commands send a single mode 6 message to
the server and expect a single response message. The exceptions are the
\f(CRpeers\fP command, which sends a series of messages, and the \f(CRmreadlist\fP
and \f(CRmreadvar\fP commands, which iterate over a range of associations.
.sp
\f(CRassociations\fP
.RS 4
Display a list of mobilized associations in the form
.sp
.if n .RS 4
.nf
.fam C
ind assid status conf reach auth condition last_event cnt
.fam
.fi
.if n .RE
.TS
allbox tab(:);
lt lt.
T{
.sp
Variable
T}:T{
.sp
Description
T}
T{
.sp
\f(CRind\fP
T}:T{
.sp
index on this list
T}
T{
.sp
\f(CRassid\fP
T}:T{
.sp
association ID
T}
T{
.sp
\f(CRstatus\fP
T}:T{
.sp
.URL "decode.html#peer" "peer status word" ""
T}
T{
.sp
\f(CRconf\fP
T}:T{
.sp
\f(CRyes\fP: persistent, \f(CRno\fP: ephemeral
T}
T{
.sp
\f(CRreach\fP
T}:T{
.sp
\f(CRyes\fP: reachable, \f(CRno\fP: unreachable
T}
T{
.sp
\f(CRauth\fP
T}:T{
.sp
\f(CRok\fP, \f(CRyes\fP, \f(CRbad\fP and \f(CRnone\fP
T}
T{
.sp
\f(CRcondition\fP
T}:T{
.sp
selection status (see the \f(CRselect\fP field of the
.URL "decode.html#peer" "peer status word" ")"
T}
T{
.sp
\f(CRlast_event\fP
T}:T{
.sp
event report (see the \f(CRevent\fP field of the \c
.URL "decode.html#peer" "peer
status word" )
T}
T{
.sp
\f(CRcnt\fP
T}:T{
.sp
event count (see the \f(CRcount\fP field of the \c
.URL "decode.html#peer" "peer
status word" )
T}
.TE
.sp
.RE
.sp
\f(CRauthinfo\fP
.RS 4
Display the authentication statistics.
.RE
.sp
\f(CRclockvar\fP \fIassocID\fP [\fIname\fP [ = \fIvalue\fP [...] ][...], \f(CRcv\fP \fIassocID\fP [\fIname\fP [ = \fIvalue\fP [...] ][...]
.RS 4
Display a list of \c
.URL "#clock" "clock variables" " "
for those associations
supporting a reference clock.
.RE
.sp
\f(CR:config [...]\fP
.RS 4
Send the remainder of the command line, including whitespace, to the
server as a run\-time configuration command in the same format as the
configuration file. This command is experimental until further notice
and clarification. Authentication is of course required.
.RE
.sp
\f(CRconfig\-from\-file\fP \fIfilename\fP
.RS 4
Send each line of \fIfilename\fP to the server as run\-time
configuration commands in the same format as the configuration file.
This command is experimental until further notice and clarification.
Authentication is required.
.RE
.sp
\f(CRifstats\fP
.RS 4
Display statistics for each local network address. Authentication is
required.
.RE
.sp
\f(CRiostats\fP
.RS 4
Display network and reference clock I/O statistics.
.RE
.sp
\f(CRkerninfo\fP
.RS 4
Display kernel loop and PPS statistics. As with other ntpq output,
times are in milliseconds. The precision value displayed is in
milliseconds as well, unlike the precision system variable.
.RE
.sp
\f(CRlassociations\fP
.RS 4
Perform the same function as the associations command, except display
mobilized and unmobilized associations.
.RE
.sp
\f(CRlpeers\fP [\f(CR\-4\fP | \f(CR\-6\fP]
.RS 4
Print a peer spreadsheet for the appropriate IP version(s). \fIdstadr\fP
(associated with any given IP version).
.RE
.sp
\f(CRmonstats\fP
.RS 4
Display monitor facility statistics.
.RE
.sp
\f(CRdirect\fP
.RS 4
Normally, the mrulist command retrieves an entire MRU report (possibly
consisting of more than one MRU span), sorts it, and presents the
result. But attempting to fetch an entire MRU report may fail on a
server so loaded that none of its MRU entries age out before they
are shipped. With this option, each segment is reported as it arrives.
.RE
.sp
\f(CRmrulist\fP [\f(CRlimited\fP | \f(CRkod\fP | \f(CRmincount=\fP\fIcount\fP | \f(CRmindrop=\fP\fIdrop\fP | \f(CRminscore=\fP\fIscore\fP | \f(CRmaxlstint=\fP\fIseconds\fP | \f(CRminlstint=\fP\fIseconds\fP | \f(CRladdr=\fP\fIlocaladdr\fP | \f(CRsort=\fP\fIsortorder\fP | \f(CRresany=\fP\fIhexmask\fP | \f(CRresall=\fP\fIhexmask\fP | \f(CRlimit=\fP\fIlimit\fP | \f(CRaddr.\fP\fInum\fP+=+\fIaddress\fP]
.RS 4
Obtain and print traffic counts collected and maintained by the
monitor facility. This is useful for tracking who \fIuses\fP or
\fIabuses\fP your server.
.sp
Except for \f(CRsort=\fP\fIsortorder\fP, the options
filter the list returned by \f(CRntpd\fP. The \f(CRlimited\fP and \f(CRkod\fP options
return only entries representing client addresses from which the last
packet received triggered either discarding or a KoD response.
the \f(CRaddr.\fP\fInum\fP+=+ option adds specific addresses to retrieve when
\f(CRlimit=\fP\fI1\fP. Values of 0 to 15 are supported for \fInum\fP. Also, used
internally with \f(CRlast.\fP\fInum\fP+=\f(CR\fIhextime\fP to select the starting point
for retrieving continued response.
the +frags=\fP\fIfrags\fP option limits the number of datagrams
(fragments) in response.  Used by newer ntpq versions instead
of limit= when retrieving multiple entries.
The \f(CRlimit=\fP option limits the MRU entries returned per response.
limit=1 is a special case:  Instead of fetching beginning with
the supplied starting points (provided by a last.\fIx\fP and addr.\fIx\fP
where 0 \(lA x \(lA 15, default the beginning of time) newer neighbor,
fetch the supplied entries. This enables fetching multiple entries
from given IP addresses (provided by addr.\fIx\fP= entries where 0 \(lA x
\(lA 15). When limit is not one and frags= is provided,
the fragment limit controls. NOTE: a single mrulist command may
cause many query/response rounds allowing limits as low as 3 to
potentially retrieve thousands of entries in responses.
The \f(CRmincount=\fP\fIcount\fP option filters out entries that have received less
than \fIcount\fP packets.
The \f(CRmindrop=\fP\fIdrop\fP option filters out entries that have dropped less
than \fIdrop\fP packets.
The \f(CRminscore=\fP\fIscore\fP option filters out entries with a score less
than \fIscore\fP.
The \f(CRmaxlstint=\fP\fIseconds\fP option filters out entries where no packets have
arrived within \fIseconds\fP.
The \f(CRminlstint=\fP\fIseconds\fP option filters out entries with a packet has
arrived within \fIseconds\fP.
The \f(CRladdr=\fP\fIlocaladdr\fP option filters out entries for packets
received on any local address other than \fIlocaladdr\fP. \f(CRresany=\fP\fIhexmask\fP
and \f(CRresall=\fP\fIhexmask\fP filter entries containing none or less than all,
respectively, of the bits in \fIhexmask\fP, which must begin with \f(CR0x\fP.
.sp
The \fIsortorder\fP defaults to \f(CRlstint\fP and may be any of \f(CRaddr\fP,
\f(CRcount\fP, \f(CRavgint\fP, \f(CRlstint\fP, \f(CRscore\fP, \f(CRdrop\fP or any of those
preceded by a minus sign (hyphen) to reverse the sort order.
The output columns are:
.RE
.TS
allbox tab(:);
lt lt.
T{
.sp
Column
T}:T{
.sp
Description
T}
T{
.sp
\f(CRlstint\fP
T}:T{
.sp
Interval in s between the receipt of the most recent packet from this
address and the completion of the retrieval of the MRU list by \f(CRntpq\fP.
T}
T{
.sp
\f(CRavgint\fP
T}:T{
.sp
Average interval in s between packets from this address.
T}
T{
.sp
\f(CRrstr\fP
T}:T{
.sp
Restriction flags associated with this address. Most are copied
unchanged from the matching \f(CRrestrict\fP command, however 0x400 (kod)
and 0x20 (limited) flags are cleared unless the last packet from this
address triggered a rate control response.
T}
T{
.sp
\f(CRr\fP
T}:T{
.sp
Rate control indicator, either a period, \f(CRL\fP or \f(CRK\fP for no rate
control response, rate limiting by discarding, or rate limiting with a
KoD response, respectively.
T}
T{
.sp
\f(CRm\fP
T}:T{
.sp
Packet mode.
T}
T{
.sp
\f(CRv\fP
T}:T{
.sp
Packet version number.
T}
T{
.sp
\f(CRcount\fP
T}:T{
.sp
Packets received from this address.
T}
T{
.sp
\f(CRscore\fP
T}:T{
.sp
Packets per second (averaged with exponential decay).
T}
T{
.sp
\f(CRdrop\fP
T}:T{
.sp
Packets dropped (or KoDed) from this address.
T}
T{
.sp
\f(CRrport\fP
T}:T{
.sp
Source port of last packet from this address.
T}
T{
.sp
\f(CRremote address\fP
T}:T{
.sp
DNS name, numeric address, or address followed by claimed DNS name
which could not be verified in parentheses.
T}
.TE
.sp
.sp
\f(CRmreadvar\fP \fIassocID\fP \fIassocID\fP [ \fIvariable_name\fP [ = \fIvalue\fP[ ... ], \f(CRmrv\fP \fIassocID\fP \fIassocID\fP [ \fIvariable_name\fP [ = \fIvalue\fP[ ... ]
.RS 4
Perform the same function as the \f(CRreadvar\fP command, except for a range
of association IDs. This range is determined from the association list
cached by the most recent \f(CRassociations\fP command.
.RE
.sp
\f(CRopeers\fP
.RS 4
Obtain and print the old\-style list of all peers and clients showing
\fIdstadr\fP (associated with any given IP version), rather than the
\fIrefid\fP.
.RE
.sp
\f(CRpassociations\fP
.RS 4
Perform the same function as the \f(CRassociations command\fP, except that
it uses previously stored data rather than making a new query.
.RE
.sp
\f(CRpeers\fP
.RS 4
Display a list of peers in the form
.sp
\f(CRtally remote refid st t when pool reach delay offset jitter\fP
.RE
.TS
allbox tab(:);
lt lt.
T{
.sp
Variable
T}:T{
.sp
Description
T}
T{
.sp
\f(CRtally\fP
T}:T{
.sp
single\-character code indicating current value of the \f(CRselect\fP field
of the \c
.URL "decode.html#peer" "peer status word" ""
T}
T{
.sp
\f(CRremote\fP
T}:T{
.sp
host name (or IP number) of peer
T}
T{
.sp
\f(CRrefid\fP
T}:T{
.sp
association ID or \c
.URL "decode.html#kiss" "kiss code" ""
T}
T{
.sp
\f(CRst\fP
T}:T{
.sp
stratum
T}
T{
.sp
\f(CRt\fP
T}:T{
.sp
\f(CRu\fP: unicast or manycast client,
\f(CRl\fP: local (reference clock), \f(CRs\fP: symmetric (peer), server, \f(CRB\fP:
broadcast server, 1\-8 NTS unicast with this number of cookies stored.
T}
T{
.sp
\f(CRwhen\fP
T}:T{
.sp
sec/min/hr since last received packet
T}
T{
.sp
\f(CRpoll\fP
T}:T{
.sp
poll interval (log2 s)
T}
T{
.sp
\f(CRreach\fP
T}:T{
.sp
reach shift register (octal)
T}
T{
.sp
\f(CRdelay\fP
T}:T{
.sp
roundtrip delay
T}
T{
.sp
\f(CRoffset\fP
T}:T{
.sp
offset of server relative to this host
T}
T{
.sp
\f(CRjitter\fP
T}:T{
.sp
jitter
T}
.TE
.sp
.sp
The tally code is one of the following:
.TS
allbox tab(:);
lt lt.
T{
.sp
Code
T}:T{
.sp
Description
T}
T{
.sp

T}:T{
.sp
discarded as not valid
T}
T{
.sp
\f(CRx\fP
T}:T{
.sp
discarded by intersection algorithm
T}
T{
.sp
\f(CR.\fP
T}:T{
.sp
discarded by table overflow (not used)
T}
T{
.sp
\f(CR\-\fP
T}:T{
.sp
discarded by the cluster algorithm
T}
T{
.sp
\f(CR+\fP
T}:T{
.sp
included by the combine algorithm
T}
T{
.sp
\f(CR#\fP
T}:T{
.sp
backup (more than \f(CRtos maxclock\fP sources)
T}
T{
.sp
\f(CR*\fP
T}:T{
.sp
system peer
T}
T{
.sp
\f(CRo\fP
T}:T{
.sp
PPS peer (when the prefer peer is valid)
T}
.TE
.sp
.sp
\f(CRapeers\fP
.RS 4
Display a list of peers in the form:
.sp
.if n .RS 4
.nf
.fam C
[tally]remote refid assid st t when pool reach delay offset jitter
.fam
.fi
.if n .RE
.sp
where the output is just like the \f(CRpeers\fP command except that the
\f(CRrefid\fP is displayed in hex format and the association number is also
displayed.
.RE
.sp
\f(CRrpeers\fP
.RS 4
Display a list of peers in the form
.sp
\f(CRst t when pool reach delay offset jitter refid tally remote\fP
.RE
.sp
\f(CRpstats\fP \fIassocID\fP
.RS 4
Show the statistics for the peer with the given \fIassocID\fP.
.RE
.sp
\f(CRreadvar\fP \fIassocID\fP [ \fIname\fP ] [,...], \f(CRrv\fP \fIassocID\fP [ \fIname\fP ] [,...]
.RS 4
Display the specified variables. If \f(CRassocID\fP is zero, the variables
are from the \c
.URL "#system" "system variables" " "
name space, otherwise they
are from the \c
.URL "#peer" "peer variables" " "
name space. The \f(CRassocID\fP is
required, as the same name can occur in both spaces. If no \f(CRname\fP is
included, all operative variables in the name space are displayed. In
this case only, if the \f(CRassocID\fP is omitted, it is assumed zero.
Multiple names are specified with comma separators and without
whitespace. Note that time values are represented in milliseconds and
frequency values in parts\-per\-million (PPM). Some NTP timestamps are
represented in the format YYYYMMDDTTTT, where YYYY is the year, MM the
month of the year, DD the day of the month and TTTT the time of day.
.RE
.sp
\f(CRreslist\fP
.RS 4
Show the access control (restrict) list for \f(CRntpq\fP.
.RE
.sp
\f(CRtimerstats\fP
.RS 4
Display interval timer counters.
.RE
.sp
\f(CRwritelist\fP \fIassocID\fP
.RS 4
Write the system or peer variables included in the variable list.
.RE
.sp
\f(CRwritevar\fP \fIassocID\fP \fIname\fP = \fIvalue\fP [,...]
.RS 4
Write the specified variables. If the \f(CRassocID\fP is zero, the variables
are from the \c
.URL "#system" "system variables" " "
name space, otherwise they
are from the \c
.URL "#peer" "peer variables" " "
name space. The \f(CRassocID\fP is
required, as the same name can occur in both spaces.
.RE
.sp
\f(CRsysinfo\fP
.RS 4
Display operational summary.
.RE
.sp
\f(CRsysstats\fP
.RS 4
Print statistics counters maintained in the protocol module.  Note
that the relationships among these counters can look unlikely because
packets can get flagged for inclusion in exception statistics in more
than one way, for example by having both a bad length and an old version.
.RE
.sp
\f(CRntsinfo\fP
.RS 4
Display a summary of the NTS state, including
both the the NTS client and NTS server components.  Note that
the format of the output text may change as this feature is
developed.  This command is experimental until further notice
and clarification.
.RE
.SH "AUTHENTICATION"
.sp
Four commands require authentication to the server: config\-from\-file,
config, ifstats, and reslist.  An authkey file must be in place and
a control key declared in ntp.conf for these commands to work.
.sp
If you are running as root or otherwise have read access to the
authkey and ntp.conf file, ntpq will mine the required credentials
for you. Otherwise, you will be prompted to enter a key ID and password.
.sp
Credentials once entered, are retained and used for the duration
of your ntpq session.
.SH "STATUS WORDS AND KISS CODES"
.sp
The current state of the operating program is shown in a set of status
words maintained by the system and each association separately. These
words are displayed in the \f(CRrv\fP and \f(CRas\fP commands both in hexadecimal
and decoded short tip strings. The codes, tips, and short explanations
are on the \c
.URL "decode.html" "Event Messages and Status Words" " "
page. The
page also includes a list of system and peer messages, the code for the
latest of which is included in the status word.
.sp
Information resulting from protocol machine state transitions is
displayed using an informal set of ASCII strings called
.URL "decode.html#kiss" "kiss codes" "."
The original purpose was for
kiss\-o\(aq\-death (KoD) packets sent by the server to advise the client of
an unusual condition. They are now displayed, when appropriate, in the
reference identifier field in various billboards.
.SH "SYSTEM VARIABLES"
.sp
The following system variables appear in the \f(CRrv\fP billboard. Not all
variables are displayed in some configurations.
.TS
allbox tab(:);
lt lt.
T{
.sp
Variable
T}:T{
.sp
Description
T}
T{
.sp
\f(CRstatus\fP
T}:T{
.sp
.URL "decode.html#sys" "system status word" ""
T}
T{
.sp
\f(CRversion\fP
T}:T{
.sp
NTP software version and build time
T}
T{
.sp
\f(CRprocessor\fP
T}:T{
.sp
hardware platform and version
T}
T{
.sp
\f(CRsystem\fP
T}:T{
.sp
operating system and version
T}
T{
.sp
\f(CRleap\fP
T}:T{
.sp
leap warning indicator (0\-3)
T}
T{
.sp
\f(CRstratum\fP
T}:T{
.sp
stratum (1\-15)
T}
T{
.sp
\f(CRprecision\fP
T}:T{
.sp
precision (log2 s)
T}
T{
.sp
\f(CRrootdelay\fP
T}:T{
.sp
total roundtrip delay to the primary reference clock
T}
T{
.sp
\f(CRrootdisp\fP
T}:T{
.sp
total dispersion to the primary reference clock
T}
T{
.sp
\f(CRpeer\fP
T}:T{
.sp
system peer association ID
T}
T{
.sp
\f(CRtc\fP
T}:T{
.sp
time constant and poll exponent (log2 s) (3\-17)
T}
T{
.sp
\f(CRmintc\fP
T}:T{
.sp
minimum time constant (log2 s) (3\-10)
T}
T{
.sp
\f(CRclock\fP
T}:T{
.sp
date and time of day
T}
T{
.sp
\f(CRrefid\fP
T}:T{
.sp
reference ID or \c
.URL "decode.html#kiss" "kiss code" ""
T}
T{
.sp
\f(CRreftime\fP
T}:T{
.sp
reference time
T}
T{
.sp
\f(CRoffset\fP
T}:T{
.sp
combined offset of server relative to this host
T}
T{
.sp
\f(CRsys_jitter\fP
T}:T{
.sp
combined system jitter
T}
T{
.sp
\f(CRfrequency\fP
T}:T{
.sp
frequency offset (PPM) relative to hardware clock
T}
T{
.sp
\f(CRclk_wander\fP
T}:T{
.sp
clock frequency wander (PPM)
T}
T{
.sp
\f(CRclk_jitter\fP
T}:T{
.sp
clock jitter
T}
T{
.sp
\f(CRtai\fP
T}:T{
.sp
TAI\-UTC offset (s)
T}
T{
.sp
\f(CRleapsec\fP
T}:T{
.sp
NTP seconds when the next leap second is/was inserted
T}
T{
.sp
\f(CRexpire\fP
T}:T{
.sp
NTP seconds when the NIST leapseconds file expires
T}
.TE
.sp
.sp
The jitter and wander statistics are exponentially\-weighted RMS
averages. The system jitter is defined in the NTPv4 specification; the
clock jitter statistic is computed by the clock discipline module.
.SH "PEER VARIABLES"
.sp
The following peer variables appear in the \f(CRrv\fP billboard for each
association. Not all variables are displayed in some configurations.
.TS
allbox tab(:);
lt lt.
T{
.sp
Variable
T}:T{
.sp
Description
T}
T{
.sp
\f(CRassocid\fP
T}:T{
.sp
association ID
T}
T{
.sp
\f(CRstatus\fP
T}:T{
.sp
.URL "decode.html#peer" "peer status word" ""
T}
T{
.sp
\f(CRsrcadr srcport\fP
T}:T{
.sp
source (remote) IP address and port
T}
T{
.sp
\f(CRdstadr dstport\fP
T}:T{
.sp
destination (local) IP address and port
T}
T{
.sp
\f(CRleap\fP
T}:T{
.sp
leap indicator (0\-3)
T}
T{
.sp
\f(CRstratum\fP
T}:T{
.sp
stratum (0\-15)
T}
T{
.sp
\f(CRprecision\fP
T}:T{
.sp
precision (log2 s)
T}
T{
.sp
\f(CRrootdelay\fP
T}:T{
.sp
total roundtrip delay to the primary reference clock
T}
T{
.sp
\f(CRrootdisp\fP
T}:T{
.sp
total root dispersion to the primary reference clock
T}
T{
.sp
\f(CRrefid\fP
T}:T{
.sp
reference ID or \c
.URL "decode.html#kiss" "kiss code" ""
T}
T{
.sp
\f(CRreftime\fP
T}:T{
.sp
reference time
T}
T{
.sp
\f(CRreach\fP
T}:T{
.sp
reach register (octal)
T}
T{
.sp
\f(CRunreach\fP
T}:T{
.sp
unreach counter
T}
T{
.sp
\f(CRhmode\fP
T}:T{
.sp
host mode (1\-6)
T}
T{
.sp
\f(CRpmode\fP
T}:T{
.sp
peer mode (1\-5)
T}
T{
.sp
\f(CRhpoll\fP
T}:T{
.sp
host poll exponent (log2 s) (3\-17)
T}
T{
.sp
\f(CRppoll\fP
T}:T{
.sp
peer poll exponent (log2 s) (3\-17)
T}
T{
.sp
\f(CRheadway\fP
T}:T{
.sp
headway (see \c
.URL "rate.html" "Rate Management and
the Kiss\-o\(aq\-Death Packet)"
T}
T{
.sp
\f(CRflash\fP
T}:T{
.sp
.URL "decode.html#flash" "flash status word" ""
T}
T{
.sp
\f(CRoffset\fP
T}:T{
.sp
filter offset
T}
T{
.sp
\f(CRdelay\fP
T}:T{
.sp
filter delay
T}
T{
.sp
\f(CRdispersion\fP
T}:T{
.sp
filter dispersion
T}
T{
.sp
\f(CRjitter\fP
T}:T{
.sp
filter jitter
T}
T{
.sp
\f(CRbias\fP
T}:T{
.sp
fudge for asymmetric links/paths
T}
.TE
.sp
.SH "CLOCK VARIABLES"
.sp
The following clock variables appear in the \f(CRcv\fP billboard for each
association with a reference clock. Not all variables are displayed in
some configurations.
.TS
allbox tab(:);
lt lt.
T{
.sp
Variable
T}:T{
.sp
Description
T}
T{
.sp
\f(CRassocid\fP
T}:T{
.sp
association ID
T}
T{
.sp
\f(CRstatus\fP
T}:T{
.sp
.URL "decode.html#clock" "clock status word" ""
T}
T{
.sp
\f(CRdevice\fP
T}:T{
.sp
device description
T}
T{
.sp
\f(CRtimecode\fP
T}:T{
.sp
ASCII time code string (specific to device)
T}
T{
.sp
\f(CRpoll\fP
T}:T{
.sp
poll messages sent
T}
T{
.sp
\f(CRnoreply\fP
T}:T{
.sp
no reply
T}
T{
.sp
\f(CRbadformat\fP
T}:T{
.sp
bad format
T}
T{
.sp
\f(CRbaddata\fP
T}:T{
.sp
bad date or time
T}
T{
.sp
\f(CRfudgetime1\fP
T}:T{
.sp
fudge time 1
T}
T{
.sp
\f(CRfudgetime2\fP
T}:T{
.sp
fudge time 2
T}
T{
.sp
\f(CRstratum\fP
T}:T{
.sp
driver stratum
T}
T{
.sp
\f(CRrefid\fP
T}:T{
.sp
driver reference ID
T}
T{
.sp
\f(CRflags\fP
T}:T{
.sp
driver flags
T}
.TE
.sp
.SH "COMPATIBILITY"
.sp
When listing refids, addresses of the form 127.127.x.x are no longer
automatically interpreted as local refclocks as in older versions of
\f(CRntpq\fP. Instead, a clock\-format display is requested by the NTPsec
daemon when appropriate (by setting the srcaddr peer variable). This
means that when used to query legacy versions of ntpd, which do not
know how to request this, this program will do a slightly wrong thing.
.sp
In older versions, the \fItype\fP variable associated with a
reference clock was a numeric driver type index. It has been replaced
by \fIname\fP, a shortname for the driver type.
.sp
In older versions, no count of control packets was listed under sysstats.
.sp
The \f(CR\-O\fP (\f(CR\-\-old\-rv\fP) option of legacy versions has been retired.
.SH "KNOWN LIMITATIONS"
.sp
It is possible for a ":config unpeer" command to fail silently, yielding
"Config Succeeded", if it is given a peer identifier that looks like
a driver type name or a hostname not present in the peer list. The
error will, however, be reported in the system log.
.sp
The config command cannot be used to change a server\(cqs default restrictions.
.sp
Under some circumstances python 2 cannot emit unicode. When true, the display
of units is downgraded to non\-unicode alternatives. One place a user is
likely to encounter this is when diverting output through a pipe. Attempts
have been made to force the use of UTF\-8, all of which break the command
history feature.
.sp
When using the \-u option, very old xterms may fail to render &mu;
correctly.  If this happens, be sure your xterm is started with the \-u8
option, or the \fIutf8\fP resource\(aq, and that your console font contains
the UTF\-8 &mu; character.  Also confirm your LANG environment variable is
set to a UTF\-8 language, like this: "export LANG=en_US.utf8".
.sp
Timestamp interpretation in this program is likely to fail in flaky
ways if the local system clock has not already been approximately
synchronized to UTC. Querying a server based in a different
NTP era than the current one is especially likely to fail.
.sp
This program will behave in apparently buggy and only semi\-predictable
ways when fetching MRU lists from \fIany\fP server with sufficiently high
traffic.
.sp
The problem is fundamental. The Mode 6 protocol can\(cqt ship (and your
client cannot accept) MRU records as fast as the daemon accepts
incoming traffic. Under these circumstances, the daemon will
repeatedly fail to ship an entire report, leading to long
hangs as your client repeatedly re\-sends the request. Eventually the
Mode 6 client library will throw an error indicating that a maximum
number of restarts has been exceeded.
.sp
To avoid this problem, avoid monitoring over links that don\(cqt have
enough capacity to handle the monitored server\(cqs \fIentire\fP NTP load.
.sp
You may be able to retrieve partial data in very high\-traffic
conditions by using the \fIdirect\fP option.
.SH "EXIT STATUS"
.sp
One of the following exit values will be returned:
.sp
0 (EXIT_SUCCESS)
.RS 4
Successful program execution.
.RE
.sp
1 (EXIT_FAILURE)
.RS 4
The operation failed or the command syntax was not valid.
.RE